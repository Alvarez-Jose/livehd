Semantic Pass Function Descriptions

==== TYPE CHECK FUNCTIONS =====

is_primitive_op()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a primitive type (e.g. logical, unary, nary operation). Otherwise, returns false.

is_tree_structs()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a Tree Structure type (e.g. if, for, conditional statement). Otherwise, returns false.

is_temp_var()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a temporary variable denoted by 3 underscores ('____'). Otherwise, returns false.

is_a_number()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node name is an integer. Otherwise, returns false.

===============================

== Existence Check Functions ==

Note on Parameters:
FlatHashMap write --> Holds written-to-variables as keys and statement node names they belong to as values
FlatHashMap read  --> Holds read-from-variables as keys and statement node names they belong to as values

in_write_list()
* Parameters: FlatHashMap, LNAST Node Name, LNAST Statement Name (the statement it belongs to)
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_read_list()
* Parameters: FlatHashMap, LNAST Node Name, LNAST Statement Name (the statement it belongs to)
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_inefficient_LNAST()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_output_vars()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_lhs_list()
* Parameters: LNAST Class, Index n (integer)
* Return value: std::string_view
* Returns LNAST Node Name at Index n if it exists. Otherwise return an empty std::string_view

in_rhs_list()
* Parameters: LNAST Class, LNAST Node Name, Index n (integer)
* Return value: integer
* Returns integer of the index where Node Name is located when starting search from 0 or from n

in_in_scope_stack()
* Paremeter: LNAST Node Name
* Return value: boolean
* Returns true of LNAST Node Name exists in even indices of in_scope_stack. Otherwise, returns false.

===============================

