Things to test:
1. test clocked logic as well
2. test design with 2/1/0 modules

Things to do:
1. Create floorplans

Quick things to do:
1. add ratio metric (to indicate if blocks are flexible)
2. rewrite initial hierarchy printing to use shape=record and dump more info

Things to optimize:
1. area adjustment algorithm is naive, and inserts area when it isn't necessary
2. iterating over LGraphs could possibly use some work
3. preloading vectors with sizes known ahead of time could save some time
4. check to see if graph lib has fast functions to do what I'm doing myself
5. set/map -> absl versions
6. map -> pair of arrays (have to profile this to see if it makes a difference)
7. put more stuff on the heap?
9. for loops -> ranges (faster?)
10. beware of temporaries
11. only need <functional> if doing a recursive lambda...

n. const <type>& -> &&?
n. when making maps, see if I can use references instead of actual copies - might be a lot cheaper!

Refactors:
0. namespace stuff
1. move recursive versions of functions into lambdas or just use static counters idk
2. replace '&' in lambdas with actual things used if # things used is small
3. more comments...?
4. replace fmt strings with macro fmt strings that catch more stuff at compile time
5. shorten comparisons if it doesn't impact readability

Things tried:
 - string -> string_view: string_views need to not outlive the string they are initialized with
 - graph::Out_adjacency_list: buggy