circuit FPToFP :
  module RoundAnyRawFNToRecFN_4 : 
    output io : {flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h00")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h01")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h02")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h03")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h04")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h06")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node sAdjustedExp = add(io.in.sExp, asSInt(UInt<12>("h0900"))) @[RoundAnyRawFNToRecFN.scala 108:24]
    node _T_3 = bits(io.in.sig, 53, 28) @[RoundAnyRawFNToRecFN.scala 114:26]
    node _T_4 = bits(io.in.sig, 27, 0) @[RoundAnyRawFNToRecFN.scala 115:26]
    node _T_5 = orr(_T_4) @[RoundAnyRawFNToRecFN.scala 115:60]
    node adjustedSig = cat(_T_3, _T_5) @[Cat.scala 29:58]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_6 = bits(sAdjustedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _T_7 = not(_T_6) @[primitives.scala 51:21]
    node _T_8 = bits(_T_7, 8, 8) @[primitives.scala 57:25]
    node _T_9 = bits(_T_7, 7, 0) @[primitives.scala 58:26]
    node _T_10 = bits(_T_9, 7, 7) @[primitives.scala 57:25]
    node _T_11 = bits(_T_9, 6, 0) @[primitives.scala 58:26]
    node _T_12 = bits(_T_11, 6, 6) @[primitives.scala 57:25]
    node _T_13 = bits(_T_11, 5, 0) @[primitives.scala 58:26]
    node _T_14 = dshr(asSInt(UInt<65>("h010000000000000000")), _T_13) @[primitives.scala 77:58]
    node _T_15 = bits(_T_14, 63, 42) @[primitives.scala 79:22]
    node _T_16 = bits(_T_15, 15, 0) @[Bitwise.scala 109:18]
    node _T_17 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 102:47]
    node _T_18 = xor(UInt<16>("h0ffff"), _T_17) @[Bitwise.scala 102:21]
    node _T_19 = shr(_T_16, 8) @[Bitwise.scala 103:21]
    node _T_20 = and(_T_19, _T_18) @[Bitwise.scala 103:31]
    node _T_21 = bits(_T_16, 7, 0) @[Bitwise.scala 103:46]
    node _T_22 = shl(_T_21, 8) @[Bitwise.scala 103:65]
    node _T_23 = not(_T_18) @[Bitwise.scala 103:77]
    node _T_24 = and(_T_22, _T_23) @[Bitwise.scala 103:75]
    node _T_25 = or(_T_20, _T_24) @[Bitwise.scala 103:39]
    node _T_26 = bits(_T_18, 11, 0) @[Bitwise.scala 102:28]
    node _T_27 = shl(_T_26, 4) @[Bitwise.scala 102:47]
    node _T_28 = xor(_T_18, _T_27) @[Bitwise.scala 102:21]
    node _T_29 = shr(_T_25, 4) @[Bitwise.scala 103:21]
    node _T_30 = and(_T_29, _T_28) @[Bitwise.scala 103:31]
    node _T_31 = bits(_T_25, 11, 0) @[Bitwise.scala 103:46]
    node _T_32 = shl(_T_31, 4) @[Bitwise.scala 103:65]
    node _T_33 = not(_T_28) @[Bitwise.scala 103:77]
    node _T_34 = and(_T_32, _T_33) @[Bitwise.scala 103:75]
    node _T_35 = or(_T_30, _T_34) @[Bitwise.scala 103:39]
    node _T_36 = bits(_T_28, 13, 0) @[Bitwise.scala 102:28]
    node _T_37 = shl(_T_36, 2) @[Bitwise.scala 102:47]
    node _T_38 = xor(_T_28, _T_37) @[Bitwise.scala 102:21]
    node _T_39 = shr(_T_35, 2) @[Bitwise.scala 103:21]
    node _T_40 = and(_T_39, _T_38) @[Bitwise.scala 103:31]
    node _T_41 = bits(_T_35, 13, 0) @[Bitwise.scala 103:46]
    node _T_42 = shl(_T_41, 2) @[Bitwise.scala 103:65]
    node _T_43 = not(_T_38) @[Bitwise.scala 103:77]
    node _T_44 = and(_T_42, _T_43) @[Bitwise.scala 103:75]
    node _T_45 = or(_T_40, _T_44) @[Bitwise.scala 103:39]
    node _T_46 = bits(_T_38, 14, 0) @[Bitwise.scala 102:28]
    node _T_47 = shl(_T_46, 1) @[Bitwise.scala 102:47]
    node _T_48 = xor(_T_38, _T_47) @[Bitwise.scala 102:21]
    node _T_49 = shr(_T_45, 1) @[Bitwise.scala 103:21]
    node _T_50 = and(_T_49, _T_48) @[Bitwise.scala 103:31]
    node _T_51 = bits(_T_45, 14, 0) @[Bitwise.scala 103:46]
    node _T_52 = shl(_T_51, 1) @[Bitwise.scala 103:65]
    node _T_53 = not(_T_48) @[Bitwise.scala 103:77]
    node _T_54 = and(_T_52, _T_53) @[Bitwise.scala 103:75]
    node _T_55 = or(_T_50, _T_54) @[Bitwise.scala 103:39]
    node _T_56 = bits(_T_15, 21, 16) @[Bitwise.scala 109:44]
    node _T_57 = bits(_T_56, 3, 0) @[Bitwise.scala 109:18]
    node _T_58 = bits(_T_57, 1, 0) @[Bitwise.scala 109:18]
    node _T_59 = bits(_T_58, 0, 0) @[Bitwise.scala 109:18]
    node _T_60 = bits(_T_58, 1, 1) @[Bitwise.scala 109:44]
    node _T_61 = cat(_T_59, _T_60) @[Cat.scala 29:58]
    node _T_62 = bits(_T_57, 3, 2) @[Bitwise.scala 109:44]
    node _T_63 = bits(_T_62, 0, 0) @[Bitwise.scala 109:18]
    node _T_64 = bits(_T_62, 1, 1) @[Bitwise.scala 109:44]
    node _T_65 = cat(_T_63, _T_64) @[Cat.scala 29:58]
    node _T_66 = cat(_T_61, _T_65) @[Cat.scala 29:58]
    node _T_67 = bits(_T_56, 5, 4) @[Bitwise.scala 109:44]
    node _T_68 = bits(_T_67, 0, 0) @[Bitwise.scala 109:18]
    node _T_69 = bits(_T_67, 1, 1) @[Bitwise.scala 109:44]
    node _T_70 = cat(_T_68, _T_69) @[Cat.scala 29:58]
    node _T_71 = cat(_T_66, _T_70) @[Cat.scala 29:58]
    node _T_72 = cat(_T_55, _T_71) @[Cat.scala 29:58]
    node _T_73 = not(_T_72) @[primitives.scala 74:36]
    node _T_74 = mux(_T_12, UInt<1>("h00"), _T_73) @[primitives.scala 74:21]
    node _T_75 = not(_T_74) @[primitives.scala 74:17]
    node _T_76 = cat(_T_75, UInt<3>("h07")) @[Cat.scala 29:58]
    node _T_77 = bits(_T_11, 6, 6) @[primitives.scala 57:25]
    node _T_78 = bits(_T_11, 5, 0) @[primitives.scala 58:26]
    node _T_79 = dshr(asSInt(UInt<65>("h010000000000000000")), _T_78) @[primitives.scala 77:58]
    node _T_80 = bits(_T_79, 2, 0) @[primitives.scala 79:22]
    node _T_81 = bits(_T_80, 1, 0) @[Bitwise.scala 109:18]
    node _T_82 = bits(_T_81, 0, 0) @[Bitwise.scala 109:18]
    node _T_83 = bits(_T_81, 1, 1) @[Bitwise.scala 109:44]
    node _T_84 = cat(_T_82, _T_83) @[Cat.scala 29:58]
    node _T_85 = bits(_T_80, 2, 2) @[Bitwise.scala 109:44]
    node _T_86 = cat(_T_84, _T_85) @[Cat.scala 29:58]
    node _T_87 = mux(_T_77, _T_86, UInt<1>("h00")) @[primitives.scala 61:24]
    node _T_88 = mux(_T_10, _T_76, _T_87) @[primitives.scala 66:24]
    node _T_89 = mux(_T_8, _T_88, UInt<1>("h00")) @[primitives.scala 61:24]
    node _T_90 = or(_T_89, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 157:23]
    node _T_91 = cat(_T_90, UInt<2>("h03")) @[Cat.scala 29:58]
    node _T_92 = shr(_T_91, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_93 = cat(UInt<1>("h00"), _T_92) @[Cat.scala 29:58]
    node _T_94 = not(_T_93) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_95 = and(_T_94, _T_91) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_96 = and(adjustedSig, _T_95) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_97 = orr(_T_96) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_98 = and(adjustedSig, _T_93) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_99 = orr(_T_98) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_100 = or(_T_97, _T_99) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_101 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_102 = and(_T_101, _T_97) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_103 = and(roundMagUp, _T_100) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_104 = or(_T_102, _T_103) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_105 = or(adjustedSig, _T_91) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_106 = shr(_T_105, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_107 = add(_T_106, UInt<1>("h01")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_108 = and(roundingMode_near_even, _T_97) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_109 = eq(_T_99, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_110 = and(_T_108, _T_109) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_111 = shr(_T_91, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_112 = mux(_T_110, _T_111, UInt<26>("h00")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_113 = not(_T_112) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_114 = and(_T_107, _T_113) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_115 = not(_T_91) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_116 = and(adjustedSig, _T_115) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_117 = shr(_T_116, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_118 = and(roundingMode_odd, _T_100) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_119 = shr(_T_95, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_120 = mux(_T_118, _T_119, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_121 = or(_T_117, _T_120) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_122 = mux(_T_104, _T_114, _T_121) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_123 = shr(_T_122, 24) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_124 = cvt(_T_123) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_125 = add(sAdjustedExp, _T_124) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_126 = bits(_T_125, 8, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_126 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_127 = bits(_T_122, 23, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_128 = bits(_T_122, 22, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_129 = mux(UInt<1>("h00"), _T_127, _T_128) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_129 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _T_130 = shr(_T_125, 7) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _T_131 = geq(_T_130, asSInt(UInt<3>("h03"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _T_131 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _T_132 = lt(_T_125, asSInt(UInt<8>("h06b"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _T_132 @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_133 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_134 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_135 = mux(UInt<1>("h00"), _T_133, _T_134) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_136 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_137 = and(UInt<1>("h00"), _T_136) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_138 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_139 = orr(_T_138) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_140 = or(_T_137, _T_139) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_141 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_142 = and(_T_141, _T_135) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_143 = and(roundMagUp, _T_140) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_144 = or(_T_142, _T_143) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_145 = bits(_T_122, 25, 25) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_146 = bits(_T_122, 24, 24) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_147 = mux(UInt<1>("h00"), _T_145, _T_146) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _T_148 = shr(sAdjustedExp, 8) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _T_149 = leq(_T_148, asSInt(UInt<1>("h00"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _T_150 = and(_T_100, _T_149) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _T_151 = bits(_T_91, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _T_152 = bits(_T_91, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _T_153 = mux(UInt<1>("h00"), _T_151, _T_152) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _T_154 = and(_T_150, _T_153) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _T_155 = eq(io.detectTininess, UInt<1>("h01")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _T_156 = bits(_T_91, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _T_157 = bits(_T_91, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _T_158 = mux(UInt<1>("h00"), _T_156, _T_157) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _T_159 = eq(_T_158, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _T_160 = and(_T_155, _T_159) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _T_161 = and(_T_160, _T_147) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _T_162 = and(_T_161, _T_97) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _T_163 = and(_T_162, _T_144) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _T_164 = eq(_T_163, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _T_165 = and(_T_154, _T_164) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _T_166 = or(common_totalUnderflow, _T_165) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _T_166 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_167 = or(common_totalUnderflow, _T_100) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_167 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_168 = eq(isNaNOut, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_169 = eq(notNaN_isSpecialInfOut, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_170 = and(_T_168, _T_169) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_171 = eq(io.in.isZero, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_170, _T_171) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_172 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_172) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_173 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_173, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_174 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_175 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_174, _T_175) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_176 = eq(overflow_roundMagUp, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_176) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_177 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_177) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h00"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_178 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_179 = mux(_T_178, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_180 = not(_T_179) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_181 = and(common_expOut, _T_180) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_182 = not(UInt<9>("h06b")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_183 = mux(pegMinNonzeroMagOut, _T_182, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_184 = not(_T_183) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_185 = and(_T_181, _T_184) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_186 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_187 = not(_T_186) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_188 = and(_T_185, _T_187) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_189 = mux(notNaN_isInfOut, UInt<9>("h040"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_190 = not(_T_189) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_191 = and(_T_188, _T_190) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_192 = mux(pegMinNonzeroMagOut, UInt<9>("h06b"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_193 = or(_T_191, _T_192) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_194 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_195 = or(_T_193, _T_194) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_196 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_197 = or(_T_195, _T_196) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_198 = mux(isNaNOut, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_197, _T_198) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_199 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_200 = or(_T_199, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_201 = mux(isNaNOut, UInt<23>("h0400000"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_202 = mux(_T_200, _T_201, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_203 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 72:15]
    node _T_204 = mux(_T_203, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 72:12]
    node fractOut = or(_T_202, _T_204) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_205 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_206 = cat(_T_205, fractOut) @[Cat.scala 29:58]
    io.out <= _T_206 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_207 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_208 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_209 = cat(_T_208, overflow) @[Cat.scala 29:58]
    node _T_210 = cat(_T_209, _T_207) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_210 @[RoundAnyRawFNToRecFN.scala 285:23]
    
  module RecFNToRecFN : 
    output io : {flip in : UInt<65>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    io is invalid
    node _T = bits(io.in, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h03")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_5 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_6 = and(_T_4, _T_5) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _T_6 @[rawFloatFromRecFN.scala 55:20]
    node _T_7 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[rawFloatFromRecFN.scala 56:36]
    node _T_9 = and(_T_4, _T_8) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _T_9 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_10 = bits(io.in, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _T_10 @[rawFloatFromRecFN.scala 58:20]
    node _T_11 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _T_11 @[rawFloatFromRecFN.scala 59:20]
    node _T_12 = eq(_T_2, UInt<1>("h00")) @[rawFloatFromRecFN.scala 60:39]
    node _T_13 = bits(io.in, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_14 = cat(UInt<1>("h00"), _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
    rawIn.sig <= _T_15 @[rawFloatFromRecFN.scala 60:20]
    inst RoundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_4 @[RecFNToRecFN.scala 72:19]
    RoundAnyRawFNToRecFN.io is invalid
    node _T_16 = bits(rawIn.sig, 51, 51) @[common.scala 81:56]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[common.scala 81:49]
    node _T_18 = and(rawIn.isNaN, _T_17) @[common.scala 81:46]
    RoundAnyRawFNToRecFN.io.invalidExc <= _T_18 @[RecFNToRecFN.scala 80:48]
    RoundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h00") @[RecFNToRecFN.scala 81:48]
    RoundAnyRawFNToRecFN.io.in <- rawIn @[RecFNToRecFN.scala 82:48]
    RoundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 83:48]
    RoundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RecFNToRecFN.scala 84:48]
    io.out <= RoundAnyRawFNToRecFN.io.out @[RecFNToRecFN.scala 85:27]
    io.exceptionFlags <= RoundAnyRawFNToRecFN.io.exceptionFlags @[RecFNToRecFN.scala 86:27]
    
  module FPToFP : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {valid : UInt<1>, bits : {ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, singleIn : UInt<1>, singleOut : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, wflags : UInt<1>, rm : UInt<3>, fmaCmd : UInt<2>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}}, out : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}}, flip lt : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg inPipe_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    inPipe_valid <= io.in.valid @[Valid.scala 117:22]
    reg inPipe_bits : {ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, singleIn : UInt<1>, singleOut : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, wflags : UInt<1>, rm : UInt<3>, fmaCmd : UInt<2>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}, clock @[Reg.scala 15:16]
    when io.in.valid : @[Reg.scala 16:19]
      inPipe_bits.in3 <= io.in.bits.in3 @[Reg.scala 16:23]
      inPipe_bits.in2 <= io.in.bits.in2 @[Reg.scala 16:23]
      inPipe_bits.in1 <= io.in.bits.in1 @[Reg.scala 16:23]
      inPipe_bits.typ <= io.in.bits.typ @[Reg.scala 16:23]
      inPipe_bits.fmaCmd <= io.in.bits.fmaCmd @[Reg.scala 16:23]
      inPipe_bits.rm <= io.in.bits.rm @[Reg.scala 16:23]
      inPipe_bits.wflags <= io.in.bits.wflags @[Reg.scala 16:23]
      inPipe_bits.sqrt <= io.in.bits.sqrt @[Reg.scala 16:23]
      inPipe_bits.div <= io.in.bits.div @[Reg.scala 16:23]
      inPipe_bits.fma <= io.in.bits.fma @[Reg.scala 16:23]
      inPipe_bits.fastpipe <= io.in.bits.fastpipe @[Reg.scala 16:23]
      inPipe_bits.toint <= io.in.bits.toint @[Reg.scala 16:23]
      inPipe_bits.fromint <= io.in.bits.fromint @[Reg.scala 16:23]
      inPipe_bits.singleOut <= io.in.bits.singleOut @[Reg.scala 16:23]
      inPipe_bits.singleIn <= io.in.bits.singleIn @[Reg.scala 16:23]
      inPipe_bits.swap23 <= io.in.bits.swap23 @[Reg.scala 16:23]
      inPipe_bits.swap12 <= io.in.bits.swap12 @[Reg.scala 16:23]
      inPipe_bits.ren3 <= io.in.bits.ren3 @[Reg.scala 16:23]
      inPipe_bits.ren2 <= io.in.bits.ren2 @[Reg.scala 16:23]
      inPipe_bits.ren1 <= io.in.bits.ren1 @[Reg.scala 16:23]
      inPipe_bits.wen <= io.in.bits.wen @[Reg.scala 16:23]
      inPipe_bits.ldst <= io.in.bits.ldst @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire in : {valid : UInt<1>, bits : {ldst : UInt<1>, wen : UInt<1>, ren1 : UInt<1>, ren2 : UInt<1>, ren3 : UInt<1>, swap12 : UInt<1>, swap23 : UInt<1>, singleIn : UInt<1>, singleOut : UInt<1>, fromint : UInt<1>, toint : UInt<1>, fastpipe : UInt<1>, fma : UInt<1>, div : UInt<1>, sqrt : UInt<1>, wflags : UInt<1>, rm : UInt<3>, fmaCmd : UInt<2>, typ : UInt<2>, in1 : UInt<65>, in2 : UInt<65>, in3 : UInt<65>}} @[Valid.scala 112:21]
    in is invalid @[Valid.scala 112:21]
    in.valid <= inPipe_valid @[Valid.scala 113:17]
    in.bits <- inPipe_bits @[Valid.scala 114:16]
    node _T = bits(in.bits.rm, 1, 1) @[FPU.scala 526:31]
    node _T_1 = xor(in.bits.in1, in.bits.in2) @[FPU.scala 526:48]
    node _T_2 = bits(in.bits.rm, 0, 0) @[FPU.scala 526:77]
    node _T_3 = not(in.bits.in2) @[FPU.scala 526:82]
    node _T_4 = mux(_T_2, _T_3, in.bits.in2) @[FPU.scala 526:66]
    node signNum = mux(_T, _T_1, _T_4) @[FPU.scala 526:20]
    node _T_5 = bits(signNum, 64, 64) @[FPU.scala 527:26]
    node _T_6 = bits(in.bits.in1, 63, 0) @[FPU.scala 527:45]
    node fsgnj = cat(_T_5, _T_6) @[Cat.scala 29:58]
    wire fsgnjMux : {data : UInt<65>, exc : UInt<5>} @[FPU.scala 529:22]
    fsgnjMux is invalid @[FPU.scala 529:22]
    fsgnjMux.exc <= UInt<1>("h00") @[FPU.scala 530:16]
    fsgnjMux.data <= fsgnj @[FPU.scala 531:17]
    when in.bits.wflags : @[FPU.scala 533:25]
      node _T_7 = bits(in.bits.in1, 63, 61) @[FPU.scala 200:25]
      node _T_8 = andr(_T_7) @[FPU.scala 200:56]
      node _T_9 = bits(in.bits.in2, 63, 61) @[FPU.scala 200:25]
      node _T_10 = andr(_T_9) @[FPU.scala 200:56]
      node _T_11 = bits(in.bits.in1, 63, 61) @[FPU.scala 200:25]
      node _T_12 = andr(_T_11) @[FPU.scala 200:56]
      node _T_13 = bits(in.bits.in1, 51, 51) @[FPU.scala 201:39]
      node _T_14 = eq(_T_13, UInt<1>("h00")) @[FPU.scala 201:37]
      node _T_15 = and(_T_12, _T_14) @[FPU.scala 201:34]
      node _T_16 = bits(in.bits.in2, 63, 61) @[FPU.scala 200:25]
      node _T_17 = andr(_T_16) @[FPU.scala 200:56]
      node _T_18 = bits(in.bits.in2, 51, 51) @[FPU.scala 201:39]
      node _T_19 = eq(_T_18, UInt<1>("h00")) @[FPU.scala 201:37]
      node _T_20 = and(_T_17, _T_19) @[FPU.scala 201:34]
      node _T_21 = or(_T_15, _T_20) @[FPU.scala 536:49]
      node _T_22 = and(_T_8, _T_10) @[FPU.scala 537:27]
      node _T_23 = bits(in.bits.rm, 0, 0) @[FPU.scala 538:37]
      node _T_24 = neq(_T_23, io.lt) @[FPU.scala 538:41]
      node _T_25 = eq(_T_8, UInt<1>("h00")) @[FPU.scala 538:54]
      node _T_26 = and(_T_24, _T_25) @[FPU.scala 538:51]
      node _T_27 = or(_T_10, _T_26) @[FPU.scala 538:24]
      node _T_28 = shl(_T_21, 4) @[FPU.scala 539:31]
      fsgnjMux.exc <= _T_28 @[FPU.scala 539:18]
      node _T_29 = mux(_T_27, in.bits.in1, in.bits.in2) @[FPU.scala 540:53]
      node _T_30 = mux(_T_22, UInt<65>("h0e008000000000000"), _T_29) @[FPU.scala 540:25]
      fsgnjMux.data <= _T_30 @[FPU.scala 540:19]
      skip @[FPU.scala 533:25]
    node inTag = eq(in.bits.singleIn, UInt<1>("h00")) @[FPU.scala 543:15]
    node outTag = eq(in.bits.singleOut, UInt<1>("h00")) @[FPU.scala 544:16]
    wire mux : {data : UInt<65>, exc : UInt<5>}
    mux is invalid
    mux <- fsgnjMux
    node _T_31 = eq(outTag, UInt<1>("h00")) @[FPU.scala 547:18]
    when _T_31 : @[FPU.scala 547:34]
      node _T_32 = shr(fsgnjMux.data, 33) @[FPU.scala 548:37]
      node _T_33 = bits(fsgnjMux.data, 64, 64) @[FPU.scala 225:17]
      node _T_34 = bits(fsgnjMux.data, 51, 0) @[FPU.scala 226:20]
      node _T_35 = bits(fsgnjMux.data, 63, 52) @[FPU.scala 227:18]
      node _T_36 = shl(_T_34, 24) @[FPU.scala 228:28]
      node _T_37 = shr(_T_36, 53) @[FPU.scala 228:38]
      node _T_38 = bits(_T_35, 11, 9) @[FPU.scala 230:26]
      node _T_39 = add(_T_35, UInt<9>("h0100")) @[FPU.scala 231:31]
      node _T_40 = tail(_T_39, 1) @[FPU.scala 231:31]
      node _T_41 = sub(_T_40, UInt<12>("h0800")) @[FPU.scala 231:48]
      node _T_42 = tail(_T_41, 1) @[FPU.scala 231:48]
      node _T_43 = eq(_T_38, UInt<1>("h00")) @[FPU.scala 232:19]
      node _T_44 = geq(_T_38, UInt<3>("h06")) @[FPU.scala 232:36]
      node _T_45 = or(_T_43, _T_44) @[FPU.scala 232:25]
      node _T_46 = bits(_T_42, 5, 0) @[FPU.scala 232:65]
      node _T_47 = cat(_T_38, _T_46) @[Cat.scala 29:58]
      node _T_48 = bits(_T_42, 8, 0) @[FPU.scala 232:93]
      node _T_49 = mux(_T_45, _T_47, _T_48) @[FPU.scala 232:10]
      node _T_50 = cat(_T_33, _T_49) @[Cat.scala 29:58]
      node _T_51 = cat(_T_50, _T_37) @[Cat.scala 29:58]
      node _T_52 = cat(_T_32, _T_51) @[Cat.scala 29:58]
      mux.data <= _T_52 @[FPU.scala 548:16]
      skip @[FPU.scala 547:34]
    node _T_53 = eq(in.bits.ren2, UInt<1>("h00")) @[FPU.scala 552:27]
    node _T_54 = and(in.bits.wflags, _T_53) @[FPU.scala 552:24]
    when _T_54 : @[FPU.scala 552:42]
      node _T_55 = bits(in.bits.in1, 63, 61) @[FPU.scala 200:25]
      node _T_56 = andr(_T_55) @[FPU.scala 200:56]
      node _T_57 = mux(_T_56, UInt<65>("h0e008000000000000"), in.bits.in1) @[FPU.scala 555:24]
      fsgnjMux.data <= _T_57 @[FPU.scala 556:21]
      node _T_58 = bits(in.bits.in1, 63, 61) @[FPU.scala 200:25]
      node _T_59 = andr(_T_58) @[FPU.scala 200:56]
      node _T_60 = bits(in.bits.in1, 51, 51) @[FPU.scala 201:39]
      node _T_61 = eq(_T_60, UInt<1>("h00")) @[FPU.scala 201:37]
      node _T_62 = and(_T_59, _T_61) @[FPU.scala 201:34]
      node _T_63 = shl(_T_62, 4) @[FPU.scala 557:51]
      fsgnjMux.exc <= _T_63 @[FPU.scala 557:20]
      node _T_64 = eq(outTag, UInt<1>("h00")) @[FPU.scala 562:53]
      node _T_65 = lt(outTag, inTag) @[FPU.scala 562:110]
      node _T_66 = or(UInt<1>("h01"), _T_65) @[FPU.scala 562:100]
      node _T_67 = and(_T_64, _T_66) @[FPU.scala 562:74]
      when _T_67 : @[FPU.scala 562:120]
        inst RecFNToRecFN of RecFNToRecFN @[FPU.scala 563:30]
        RecFNToRecFN.io is invalid
        RecFNToRecFN.io.in <= in.bits.in1 @[FPU.scala 564:24]
        RecFNToRecFN.io.roundingMode <= in.bits.rm @[FPU.scala 565:34]
        RecFNToRecFN.io.detectTininess <= UInt<1>("h01") @[FPU.scala 566:36]
        node _T_68 = shr(fsgnjMux.data, 33) @[FPU.scala 568:39]
        node _T_69 = cat(_T_68, RecFNToRecFN.io.out) @[Cat.scala 29:58]
        mux.data <= _T_69 @[FPU.scala 568:18]
        mux.exc <= RecFNToRecFN.io.exceptionFlags @[FPU.scala 569:17]
        skip @[FPU.scala 562:120]
      skip @[FPU.scala 552:42]
    reg _T_70 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_70 <= in.valid @[Valid.scala 117:22]
    reg _T_71 : {data : UInt<65>, exc : UInt<5>}, clock @[Reg.scala 15:16]
    when in.valid : @[Reg.scala 16:19]
      _T_71.exc <= mux.exc @[Reg.scala 16:23]
      _T_71.data <= mux.data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_72 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_72 <= _T_70 @[Valid.scala 117:22]
    reg _T_73 : {data : UInt<65>, exc : UInt<5>}, clock @[Reg.scala 15:16]
    when _T_70 : @[Reg.scala 16:19]
      _T_73.exc <= _T_71.exc @[Reg.scala 16:23]
      _T_73.data <= _T_71.data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_74 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Valid.scala 117:22]
    _T_74 <= _T_72 @[Valid.scala 117:22]
    reg _T_75 : {data : UInt<65>, exc : UInt<5>}, clock @[Reg.scala 15:16]
    when _T_72 : @[Reg.scala 16:19]
      _T_75.exc <= _T_73.exc @[Reg.scala 16:23]
      _T_75.data <= _T_73.data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire _T_76 : {valid : UInt<1>, bits : {data : UInt<65>, exc : UInt<5>}} @[Valid.scala 112:21]
    _T_76 is invalid @[Valid.scala 112:21]
    _T_76.valid <= _T_74 @[Valid.scala 113:17]
    _T_76.bits <- _T_75 @[Valid.scala 114:16]
    io.out <- _T_76 @[FPU.scala 574:10]
    
