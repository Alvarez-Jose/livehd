circuit AMOALU :
  module AMOALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip mask : UInt<8>, flip cmd : UInt<5>, flip lhs : UInt<64>, flip rhs : UInt<64>, out : UInt<64>, out_unmasked : UInt<64>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T = eq(io.cmd, UInt<4>("h0d")) @[AMOALU.scala 64:20]
    node _T_1 = eq(io.cmd, UInt<4>("h0f")) @[AMOALU.scala 64:43]
    node max = or(_T, _T_1) @[AMOALU.scala 64:33]
    node _T_2 = eq(io.cmd, UInt<4>("h0c")) @[AMOALU.scala 65:20]
    node _T_3 = eq(io.cmd, UInt<4>("h0e")) @[AMOALU.scala 65:43]
    node min = or(_T_2, _T_3) @[AMOALU.scala 65:33]
    node add = eq(io.cmd, UInt<4>("h08")) @[AMOALU.scala 66:20]
    node _T_4 = eq(io.cmd, UInt<4>("h0a")) @[AMOALU.scala 67:26]
    node _T_5 = eq(io.cmd, UInt<4>("h0b")) @[AMOALU.scala 67:48]
    node logic_and = or(_T_4, _T_5) @[AMOALU.scala 67:38]
    node _T_6 = eq(io.cmd, UInt<4>("h09")) @[AMOALU.scala 68:26]
    node _T_7 = eq(io.cmd, UInt<4>("h0a")) @[AMOALU.scala 68:49]
    node logic_xor = or(_T_6, _T_7) @[AMOALU.scala 68:39]
    node _T_8 = bits(io.mask, 3, 3) @[AMOALU.scala 72:71]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[AMOALU.scala 72:63]
    node _T_10 = shl(_T_9, 31) @[AMOALU.scala 72:79]
    node _T_11 = or(UInt<64>("h00"), _T_10) @[AMOALU.scala 72:98]
    node _T_12 = not(_T_11) @[AMOALU.scala 72:16]
    node _T_13 = and(io.lhs, _T_12) @[AMOALU.scala 73:13]
    node _T_14 = and(io.rhs, _T_12) @[AMOALU.scala 73:31]
    node _T_15 = add(_T_13, _T_14) @[AMOALU.scala 73:21]
    node adder_out = tail(_T_15, 1) @[AMOALU.scala 73:21]
    node _T_16 = bits(io.mask, 4, 4) @[AMOALU.scala 91:49]
    node _T_17 = xor(UInt<4>("h0c"), UInt<4>("h0e")) @[AMOALU.scala 85:29]
    node _T_18 = and(io.cmd, _T_17) @[AMOALU.scala 86:17]
    node _T_19 = and(UInt<4>("h0c"), _T_17) @[AMOALU.scala 86:39]
    node _T_20 = eq(_T_18, _T_19) @[AMOALU.scala 86:25]
    node _T_21 = bits(io.lhs, 63, 63) @[AMOALU.scala 88:12]
    node _T_22 = bits(io.rhs, 63, 63) @[AMOALU.scala 88:23]
    node _T_23 = eq(_T_21, _T_22) @[AMOALU.scala 88:18]
    node _T_24 = bits(io.lhs, 63, 32) @[AMOALU.scala 80:13]
    node _T_25 = bits(io.rhs, 63, 32) @[AMOALU.scala 80:27]
    node _T_26 = lt(_T_24, _T_25) @[AMOALU.scala 80:24]
    node _T_27 = bits(io.lhs, 63, 32) @[AMOALU.scala 80:42]
    node _T_28 = bits(io.rhs, 63, 32) @[AMOALU.scala 80:58]
    node _T_29 = eq(_T_27, _T_28) @[AMOALU.scala 80:53]
    node _T_30 = bits(io.lhs, 31, 0) @[AMOALU.scala 79:26]
    node _T_31 = bits(io.rhs, 31, 0) @[AMOALU.scala 79:38]
    node _T_32 = lt(_T_30, _T_31) @[AMOALU.scala 79:35]
    node _T_33 = and(_T_29, _T_32) @[AMOALU.scala 80:69]
    node _T_34 = or(_T_26, _T_33) @[AMOALU.scala 80:38]
    node _T_35 = bits(io.lhs, 63, 63) @[AMOALU.scala 88:68]
    node _T_36 = bits(io.rhs, 63, 63) @[AMOALU.scala 88:76]
    node _T_37 = mux(_T_20, _T_35, _T_36) @[AMOALU.scala 88:58]
    node _T_38 = mux(_T_23, _T_34, _T_37) @[AMOALU.scala 88:10]
    node _T_39 = bits(io.mask, 2, 2) @[AMOALU.scala 91:49]
    node _T_40 = xor(UInt<4>("h0c"), UInt<4>("h0e")) @[AMOALU.scala 85:29]
    node _T_41 = and(io.cmd, _T_40) @[AMOALU.scala 86:17]
    node _T_42 = and(UInt<4>("h0c"), _T_40) @[AMOALU.scala 86:39]
    node _T_43 = eq(_T_41, _T_42) @[AMOALU.scala 86:25]
    node _T_44 = bits(io.lhs, 31, 31) @[AMOALU.scala 88:12]
    node _T_45 = bits(io.rhs, 31, 31) @[AMOALU.scala 88:23]
    node _T_46 = eq(_T_44, _T_45) @[AMOALU.scala 88:18]
    node _T_47 = bits(io.lhs, 31, 0) @[AMOALU.scala 79:26]
    node _T_48 = bits(io.rhs, 31, 0) @[AMOALU.scala 79:38]
    node _T_49 = lt(_T_47, _T_48) @[AMOALU.scala 79:35]
    node _T_50 = bits(io.lhs, 31, 31) @[AMOALU.scala 88:68]
    node _T_51 = bits(io.rhs, 31, 31) @[AMOALU.scala 88:76]
    node _T_52 = mux(_T_43, _T_50, _T_51) @[AMOALU.scala 88:58]
    node _T_53 = mux(_T_46, _T_49, _T_52) @[AMOALU.scala 88:10]
    node less = mux(_T_16, _T_38, _T_53) @[Mux.scala 47:69]
    node _T_54 = mux(less, min, max) @[AMOALU.scala 94:23]
    node minmax = mux(_T_54, io.lhs, io.rhs) @[AMOALU.scala 94:19]
    node _T_55 = and(io.lhs, io.rhs) @[AMOALU.scala 96:27]
    node _T_56 = mux(logic_and, _T_55, UInt<1>("h00")) @[AMOALU.scala 96:8]
    node _T_57 = xor(io.lhs, io.rhs) @[AMOALU.scala 97:27]
    node _T_58 = mux(logic_xor, _T_57, UInt<1>("h00")) @[AMOALU.scala 97:8]
    node logic = or(_T_56, _T_58) @[AMOALU.scala 96:42]
    node _T_59 = or(logic_and, logic_xor) @[AMOALU.scala 100:19]
    node _T_60 = mux(_T_59, logic, minmax) @[AMOALU.scala 100:8]
    node out = mux(add, adder_out, _T_60) @[AMOALU.scala 99:8]
    node _T_61 = bits(io.mask, 0, 0) @[Bitwise.scala 26:51]
    node _T_62 = bits(io.mask, 1, 1) @[Bitwise.scala 26:51]
    node _T_63 = bits(io.mask, 2, 2) @[Bitwise.scala 26:51]
    node _T_64 = bits(io.mask, 3, 3) @[Bitwise.scala 26:51]
    node _T_65 = bits(io.mask, 4, 4) @[Bitwise.scala 26:51]
    node _T_66 = bits(io.mask, 5, 5) @[Bitwise.scala 26:51]
    node _T_67 = bits(io.mask, 6, 6) @[Bitwise.scala 26:51]
    node _T_68 = bits(io.mask, 7, 7) @[Bitwise.scala 26:51]
    node _T_69 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_63, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_64, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_65, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = bits(_T_66, 0, 0) @[Bitwise.scala 72:15]
    node _T_80 = mux(_T_79, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_81 = bits(_T_67, 0, 0) @[Bitwise.scala 72:15]
    node _T_82 = mux(_T_81, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_83 = bits(_T_68, 0, 0) @[Bitwise.scala 72:15]
    node _T_84 = mux(_T_83, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_85 = cat(_T_72, _T_70) @[Cat.scala 29:58]
    node _T_86 = cat(_T_76, _T_74) @[Cat.scala 29:58]
    node _T_87 = cat(_T_86, _T_85) @[Cat.scala 29:58]
    node _T_88 = cat(_T_80, _T_78) @[Cat.scala 29:58]
    node _T_89 = cat(_T_84, _T_82) @[Cat.scala 29:58]
    node _T_90 = cat(_T_89, _T_88) @[Cat.scala 29:58]
    node wmask = cat(_T_90, _T_87) @[Cat.scala 29:58]
    node _T_91 = and(wmask, out) @[AMOALU.scala 104:19]
    node _T_92 = not(wmask) @[AMOALU.scala 104:27]
    node _T_93 = and(_T_92, io.lhs) @[AMOALU.scala 104:34]
    node _T_94 = or(_T_91, _T_93) @[AMOALU.scala 104:25]
    io.out <= _T_94 @[AMOALU.scala 104:10]
    io.out_unmasked <= out @[AMOALU.scala 105:19]
