circuit CompareRecFN :
  module CompareRecFN : 
    output io : {flip a : UInt<65>, flip b : UInt<65>, flip signaling : UInt<1>, lt : UInt<1>, eq : UInt<1>, gt : UInt<1>, exceptionFlags : UInt<5>}
    
    io is invalid
    node _T = bits(io.a, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h03")) @[rawFloatFromRecFN.scala 52:54]
    wire rawA : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    rawA is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_5 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_6 = and(_T_4, _T_5) @[rawFloatFromRecFN.scala 55:33]
    rawA.isNaN <= _T_6 @[rawFloatFromRecFN.scala 55:20]
    node _T_7 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[rawFloatFromRecFN.scala 56:36]
    node _T_9 = and(_T_4, _T_8) @[rawFloatFromRecFN.scala 56:33]
    rawA.isInf <= _T_9 @[rawFloatFromRecFN.scala 56:20]
    rawA.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_10 = bits(io.a, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    rawA.sign <= _T_10 @[rawFloatFromRecFN.scala 58:20]
    node _T_11 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    rawA.sExp <= _T_11 @[rawFloatFromRecFN.scala 59:20]
    node _T_12 = eq(_T_2, UInt<1>("h00")) @[rawFloatFromRecFN.scala 60:39]
    node _T_13 = bits(io.a, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_14 = cat(UInt<1>("h00"), _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
    rawA.sig <= _T_15 @[rawFloatFromRecFN.scala 60:20]
    node _T_16 = bits(io.b, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_17 = bits(_T_16, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[rawFloatFromRecFN.scala 51:54]
    node _T_19 = bits(_T_16, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_20 = eq(_T_19, UInt<2>("h03")) @[rawFloatFromRecFN.scala 52:54]
    wire rawB : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    rawB is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_21 = bits(_T_16, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_22 = and(_T_20, _T_21) @[rawFloatFromRecFN.scala 55:33]
    rawB.isNaN <= _T_22 @[rawFloatFromRecFN.scala 55:20]
    node _T_23 = bits(_T_16, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_24 = eq(_T_23, UInt<1>("h00")) @[rawFloatFromRecFN.scala 56:36]
    node _T_25 = and(_T_20, _T_24) @[rawFloatFromRecFN.scala 56:33]
    rawB.isInf <= _T_25 @[rawFloatFromRecFN.scala 56:20]
    rawB.isZero <= _T_18 @[rawFloatFromRecFN.scala 57:20]
    node _T_26 = bits(io.b, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    rawB.sign <= _T_26 @[rawFloatFromRecFN.scala 58:20]
    node _T_27 = cvt(_T_16) @[rawFloatFromRecFN.scala 59:27]
    rawB.sExp <= _T_27 @[rawFloatFromRecFN.scala 59:20]
    node _T_28 = eq(_T_18, UInt<1>("h00")) @[rawFloatFromRecFN.scala 60:39]
    node _T_29 = bits(io.b, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_30 = cat(UInt<1>("h00"), _T_28) @[Cat.scala 29:58]
    node _T_31 = cat(_T_30, _T_29) @[Cat.scala 29:58]
    rawB.sig <= _T_31 @[rawFloatFromRecFN.scala 60:20]
    node _T_32 = eq(rawA.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:19]
    node _T_33 = eq(rawB.isNaN, UInt<1>("h00")) @[CompareRecFN.scala 57:35]
    node ordered = and(_T_32, _T_33) @[CompareRecFN.scala 57:32]
    node bothInfs = and(rawA.isInf, rawB.isInf) @[CompareRecFN.scala 58:33]
    node bothZeros = and(rawA.isZero, rawB.isZero) @[CompareRecFN.scala 59:33]
    node eqExps = eq(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 60:29]
    node _T_34 = lt(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 62:20]
    node _T_35 = lt(rawA.sig, rawB.sig) @[CompareRecFN.scala 62:57]
    node _T_36 = and(eqExps, _T_35) @[CompareRecFN.scala 62:44]
    node common_ltMags = or(_T_34, _T_36) @[CompareRecFN.scala 62:33]
    node _T_37 = eq(rawA.sig, rawB.sig) @[CompareRecFN.scala 63:45]
    node common_eqMags = and(eqExps, _T_37) @[CompareRecFN.scala 63:32]
    node _T_38 = eq(bothZeros, UInt<1>("h00")) @[CompareRecFN.scala 66:9]
    node _T_39 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 67:28]
    node _T_40 = and(rawA.sign, _T_39) @[CompareRecFN.scala 67:25]
    node _T_41 = eq(bothInfs, UInt<1>("h00")) @[CompareRecFN.scala 68:19]
    node _T_42 = eq(common_ltMags, UInt<1>("h00")) @[CompareRecFN.scala 69:38]
    node _T_43 = and(rawA.sign, _T_42) @[CompareRecFN.scala 69:35]
    node _T_44 = eq(common_eqMags, UInt<1>("h00")) @[CompareRecFN.scala 69:57]
    node _T_45 = and(_T_43, _T_44) @[CompareRecFN.scala 69:54]
    node _T_46 = eq(rawB.sign, UInt<1>("h00")) @[CompareRecFN.scala 70:29]
    node _T_47 = and(_T_46, common_ltMags) @[CompareRecFN.scala 70:41]
    node _T_48 = or(_T_45, _T_47) @[CompareRecFN.scala 69:74]
    node _T_49 = and(_T_41, _T_48) @[CompareRecFN.scala 68:30]
    node _T_50 = or(_T_40, _T_49) @[CompareRecFN.scala 67:41]
    node ordered_lt = and(_T_38, _T_50) @[CompareRecFN.scala 66:21]
    node _T_51 = eq(rawA.sign, rawB.sign) @[CompareRecFN.scala 72:34]
    node _T_52 = or(bothInfs, common_eqMags) @[CompareRecFN.scala 72:62]
    node _T_53 = and(_T_51, _T_52) @[CompareRecFN.scala 72:49]
    node ordered_eq = or(bothZeros, _T_53) @[CompareRecFN.scala 72:19]
    node _T_54 = bits(rawA.sig, 51, 51) @[common.scala 81:56]
    node _T_55 = eq(_T_54, UInt<1>("h00")) @[common.scala 81:49]
    node _T_56 = and(rawA.isNaN, _T_55) @[common.scala 81:46]
    node _T_57 = bits(rawB.sig, 51, 51) @[common.scala 81:56]
    node _T_58 = eq(_T_57, UInt<1>("h00")) @[common.scala 81:49]
    node _T_59 = and(rawB.isNaN, _T_58) @[common.scala 81:46]
    node _T_60 = or(_T_56, _T_59) @[CompareRecFN.scala 75:32]
    node _T_61 = eq(ordered, UInt<1>("h00")) @[CompareRecFN.scala 76:30]
    node _T_62 = and(io.signaling, _T_61) @[CompareRecFN.scala 76:27]
    node invalid = or(_T_60, _T_62) @[CompareRecFN.scala 75:58]
    node _T_63 = and(ordered, ordered_lt) @[CompareRecFN.scala 78:22]
    io.lt <= _T_63 @[CompareRecFN.scala 78:11]
    node _T_64 = and(ordered, ordered_eq) @[CompareRecFN.scala 79:22]
    io.eq <= _T_64 @[CompareRecFN.scala 79:11]
    node _T_65 = eq(ordered_lt, UInt<1>("h00")) @[CompareRecFN.scala 80:25]
    node _T_66 = and(ordered, _T_65) @[CompareRecFN.scala 80:22]
    node _T_67 = eq(ordered_eq, UInt<1>("h00")) @[CompareRecFN.scala 80:41]
    node _T_68 = and(_T_66, _T_67) @[CompareRecFN.scala 80:38]
    io.gt <= _T_68 @[CompareRecFN.scala 80:11]
    node _T_69 = cat(invalid, UInt<4>("h00")) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_69 @[CompareRecFN.scala 81:23]
    
