circuit DivSqrtRecF64ToRaw_mulAddZ31 :
  module DivSqrtRecF64ToRaw_mulAddZ31 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {inReady_div : UInt<1>, inReady_sqrt : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<3>, usingMulAdd : UInt<4>, latchMulAddA_0 : UInt<1>, mulAddA_0 : UInt<54>, latchMulAddB_0 : UInt<1>, mulAddB_0 : UInt<54>, mulAddC_2 : UInt<105>, flip mulAddResult_3 : UInt<105>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<56>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg cycleNum_A : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 85:30]
    reg cycleNum_B : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 86:30]
    reg cycleNum_C : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 87:30]
    reg cycleNum_E : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 88:30]
    reg valid_PA : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 90:30]
    reg sqrtOp_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 91:30]
    reg majorExc_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 92:30]
    reg isNaN_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 94:30]
    reg isInf_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 95:30]
    reg isZero_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 96:30]
    reg sign_PA : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 97:30]
    reg sExp_PA : SInt<13>, clock @[DivSqrtRecF64_mulAddZ31.scala 98:30]
    reg fractB_PA : UInt<52>, clock @[DivSqrtRecF64_mulAddZ31.scala 99:30]
    reg fractA_PA : UInt<52>, clock @[DivSqrtRecF64_mulAddZ31.scala 100:30]
    reg roundingMode_PA : UInt<3>, clock @[DivSqrtRecF64_mulAddZ31.scala 101:30]
    reg valid_PB : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 103:30]
    reg sqrtOp_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 104:30]
    reg majorExc_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 105:30]
    reg isNaN_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 107:30]
    reg isInf_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 108:30]
    reg isZero_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 109:30]
    reg sign_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 110:30]
    reg sExp_PB : SInt<13>, clock @[DivSqrtRecF64_mulAddZ31.scala 111:30]
    reg bit0FractA_PB : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 112:30]
    reg fractB_PB : UInt<52>, clock @[DivSqrtRecF64_mulAddZ31.scala 113:30]
    reg roundingMode_PB : UInt<3>, clock @[DivSqrtRecF64_mulAddZ31.scala 114:30]
    reg valid_PC : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 116:30]
    reg sqrtOp_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 117:30]
    reg majorExc_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 118:30]
    reg isNaN_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 120:30]
    reg isInf_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 121:30]
    reg isZero_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 122:30]
    reg sign_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 123:30]
    reg sExp_PC : SInt<13>, clock @[DivSqrtRecF64_mulAddZ31.scala 124:30]
    reg bit0FractA_PC : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 125:30]
    reg fractB_PC : UInt<52>, clock @[DivSqrtRecF64_mulAddZ31.scala 126:30]
    reg roundingMode_PC : UInt<3>, clock @[DivSqrtRecF64_mulAddZ31.scala 127:30]
    reg fractR0_A : UInt<9>, clock @[DivSqrtRecF64_mulAddZ31.scala 129:30]
    reg hiSqrR0_A_sqrt : UInt<10>, clock @[DivSqrtRecF64_mulAddZ31.scala 131:30]
    reg partNegSigma0_A : UInt<21>, clock @[DivSqrtRecF64_mulAddZ31.scala 132:30]
    reg nextMulAdd9A_A : UInt<9>, clock @[DivSqrtRecF64_mulAddZ31.scala 133:30]
    reg nextMulAdd9B_A : UInt<9>, clock @[DivSqrtRecF64_mulAddZ31.scala 134:30]
    reg ER1_B_sqrt : UInt<17>, clock @[DivSqrtRecF64_mulAddZ31.scala 135:30]
    reg ESqrR1_B_sqrt : UInt<32>, clock @[DivSqrtRecF64_mulAddZ31.scala 137:30]
    reg sigX1_B : UInt<58>, clock @[DivSqrtRecF64_mulAddZ31.scala 138:30]
    reg sqrSigma1_C : UInt<33>, clock @[DivSqrtRecF64_mulAddZ31.scala 139:30]
    reg sigXN_C : UInt<58>, clock @[DivSqrtRecF64_mulAddZ31.scala 140:30]
    reg u_C_sqrt : UInt<31>, clock @[DivSqrtRecF64_mulAddZ31.scala 141:30]
    reg E_E_div : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 142:30]
    reg sigT_E : UInt<54>, clock @[DivSqrtRecF64_mulAddZ31.scala 143:30]
    reg isNegRemT_E : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 144:30]
    reg isZeroRemT_E : UInt<1>, clock @[DivSqrtRecF64_mulAddZ31.scala 145:30]
    wire ready_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 149:26]
    ready_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 149:26]
    wire ready_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 150:26]
    ready_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 150:26]
    wire ready_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 151:26]
    ready_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 151:26]
    wire leaving_PA : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 152:26]
    leaving_PA is invalid @[DivSqrtRecF64_mulAddZ31.scala 152:26]
    wire leaving_PB : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 153:26]
    leaving_PB is invalid @[DivSqrtRecF64_mulAddZ31.scala 153:26]
    wire leaving_PC : UInt<1> @[DivSqrtRecF64_mulAddZ31.scala 154:26]
    leaving_PC is invalid @[DivSqrtRecF64_mulAddZ31.scala 154:26]
    wire zSigma1_B4 : UInt @[DivSqrtRecF64_mulAddZ31.scala 156:34]
    zSigma1_B4 is invalid @[DivSqrtRecF64_mulAddZ31.scala 156:34]
    wire sigXNU_B3_CX : UInt @[DivSqrtRecF64_mulAddZ31.scala 157:34]
    sigXNU_B3_CX is invalid @[DivSqrtRecF64_mulAddZ31.scala 157:34]
    wire zComplSigT_C1_sqrt : UInt @[DivSqrtRecF64_mulAddZ31.scala 158:34]
    zComplSigT_C1_sqrt is invalid @[DivSqrtRecF64_mulAddZ31.scala 158:34]
    wire zComplSigT_C1 : UInt @[DivSqrtRecF64_mulAddZ31.scala 159:34]
    zComplSigT_C1 is invalid @[DivSqrtRecF64_mulAddZ31.scala 159:34]
    node _T = and(io.inReady_div, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 163:38]
    node _T_1 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 163:55]
    node cyc_S_div = and(_T, _T_1) @[DivSqrtRecF64_mulAddZ31.scala 163:52]
    node _T_2 = and(io.inReady_sqrt, io.inValid) @[DivSqrtRecF64_mulAddZ31.scala 164:38]
    node cyc_S_sqrt = and(_T_2, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 164:52]
    node cyc_S = or(cyc_S_div, cyc_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 165:27]
    node _T_3 = bits(io.a, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_4 = bits(_T_3, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[rawFloatFromRecFN.scala 51:54]
    node _T_6 = bits(_T_3, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_7 = eq(_T_6, UInt<2>("h03")) @[rawFloatFromRecFN.scala 52:54]
    wire rawA_S : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    rawA_S is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_8 = bits(_T_3, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_9 = and(_T_7, _T_8) @[rawFloatFromRecFN.scala 55:33]
    rawA_S.isNaN <= _T_9 @[rawFloatFromRecFN.scala 55:20]
    node _T_10 = bits(_T_3, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[rawFloatFromRecFN.scala 56:36]
    node _T_12 = and(_T_7, _T_11) @[rawFloatFromRecFN.scala 56:33]
    rawA_S.isInf <= _T_12 @[rawFloatFromRecFN.scala 56:20]
    rawA_S.isZero <= _T_5 @[rawFloatFromRecFN.scala 57:20]
    node _T_13 = bits(io.a, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    rawA_S.sign <= _T_13 @[rawFloatFromRecFN.scala 58:20]
    node _T_14 = cvt(_T_3) @[rawFloatFromRecFN.scala 59:27]
    rawA_S.sExp <= _T_14 @[rawFloatFromRecFN.scala 59:20]
    node _T_15 = eq(_T_5, UInt<1>("h00")) @[rawFloatFromRecFN.scala 60:39]
    node _T_16 = bits(io.a, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_17 = cat(UInt<1>("h00"), _T_15) @[Cat.scala 29:58]
    node _T_18 = cat(_T_17, _T_16) @[Cat.scala 29:58]
    rawA_S.sig <= _T_18 @[rawFloatFromRecFN.scala 60:20]
    node _T_19 = bits(io.b, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_20 = bits(_T_19, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[rawFloatFromRecFN.scala 51:54]
    node _T_22 = bits(_T_19, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_23 = eq(_T_22, UInt<2>("h03")) @[rawFloatFromRecFN.scala 52:54]
    wire rawB_S : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    rawB_S is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_24 = bits(_T_19, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_25 = and(_T_23, _T_24) @[rawFloatFromRecFN.scala 55:33]
    rawB_S.isNaN <= _T_25 @[rawFloatFromRecFN.scala 55:20]
    node _T_26 = bits(_T_19, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[rawFloatFromRecFN.scala 56:36]
    node _T_28 = and(_T_23, _T_27) @[rawFloatFromRecFN.scala 56:33]
    rawB_S.isInf <= _T_28 @[rawFloatFromRecFN.scala 56:20]
    rawB_S.isZero <= _T_21 @[rawFloatFromRecFN.scala 57:20]
    node _T_29 = bits(io.b, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    rawB_S.sign <= _T_29 @[rawFloatFromRecFN.scala 58:20]
    node _T_30 = cvt(_T_19) @[rawFloatFromRecFN.scala 59:27]
    rawB_S.sExp <= _T_30 @[rawFloatFromRecFN.scala 59:20]
    node _T_31 = eq(_T_21, UInt<1>("h00")) @[rawFloatFromRecFN.scala 60:39]
    node _T_32 = bits(io.b, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_33 = cat(UInt<1>("h00"), _T_31) @[Cat.scala 29:58]
    node _T_34 = cat(_T_33, _T_32) @[Cat.scala 29:58]
    rawB_S.sig <= _T_34 @[rawFloatFromRecFN.scala 60:20]
    node _T_35 = and(rawA_S.isZero, rawB_S.isZero) @[DivSqrtRecF64_mulAddZ31.scala 171:24]
    node _T_36 = and(rawA_S.isInf, rawB_S.isInf) @[DivSqrtRecF64_mulAddZ31.scala 171:59]
    node notSigNaNIn_invalidExc_S_div = or(_T_35, _T_36) @[DivSqrtRecF64_mulAddZ31.scala 171:42]
    node _T_37 = eq(rawB_S.isNaN, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 173:9]
    node _T_38 = eq(rawB_S.isZero, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 173:27]
    node _T_39 = and(_T_37, _T_38) @[DivSqrtRecF64_mulAddZ31.scala 173:24]
    node notSigNaNIn_invalidExc_S_sqrt = and(_T_39, rawB_S.sign) @[DivSqrtRecF64_mulAddZ31.scala 173:43]
    node _T_40 = bits(rawB_S.sig, 51, 51) @[common.scala 81:56]
    node _T_41 = eq(_T_40, UInt<1>("h00")) @[common.scala 81:49]
    node _T_42 = and(rawB_S.isNaN, _T_41) @[common.scala 81:46]
    node _T_43 = or(_T_42, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 176:38]
    node _T_44 = bits(rawA_S.sig, 51, 51) @[common.scala 81:56]
    node _T_45 = eq(_T_44, UInt<1>("h00")) @[common.scala 81:49]
    node _T_46 = and(rawA_S.isNaN, _T_45) @[common.scala 81:46]
    node _T_47 = bits(rawB_S.sig, 51, 51) @[common.scala 81:56]
    node _T_48 = eq(_T_47, UInt<1>("h00")) @[common.scala 81:49]
    node _T_49 = and(rawB_S.isNaN, _T_48) @[common.scala 81:46]
    node _T_50 = or(_T_46, _T_49) @[DivSqrtRecF64_mulAddZ31.scala 177:38]
    node _T_51 = or(_T_50, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecF64_mulAddZ31.scala 177:66]
    node _T_52 = eq(rawA_S.isNaN, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 179:18]
    node _T_53 = eq(rawA_S.isInf, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 179:36]
    node _T_54 = and(_T_52, _T_53) @[DivSqrtRecF64_mulAddZ31.scala 179:33]
    node _T_55 = and(_T_54, rawB_S.isZero) @[DivSqrtRecF64_mulAddZ31.scala 179:51]
    node _T_56 = or(_T_51, _T_55) @[DivSqrtRecF64_mulAddZ31.scala 178:46]
    node majorExc_S = mux(io.sqrtOp, _T_43, _T_56) @[DivSqrtRecF64_mulAddZ31.scala 175:12]
    node _T_57 = or(rawB_S.isNaN, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 183:26]
    node _T_58 = or(rawA_S.isNaN, rawB_S.isNaN) @[DivSqrtRecF64_mulAddZ31.scala 184:26]
    node _T_59 = or(_T_58, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecF64_mulAddZ31.scala 184:42]
    node isNaN_S = mux(io.sqrtOp, _T_57, _T_59) @[DivSqrtRecF64_mulAddZ31.scala 182:12]
    node _T_60 = or(rawA_S.isInf, rawB_S.isZero) @[DivSqrtRecF64_mulAddZ31.scala 186:63]
    node isInf_S = mux(io.sqrtOp, rawB_S.isInf, _T_60) @[DivSqrtRecF64_mulAddZ31.scala 186:23]
    node _T_61 = or(rawA_S.isZero, rawB_S.isInf) @[DivSqrtRecF64_mulAddZ31.scala 187:64]
    node isZero_S = mux(io.sqrtOp, rawB_S.isZero, _T_61) @[DivSqrtRecF64_mulAddZ31.scala 187:23]
    node _T_62 = eq(io.sqrtOp, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 188:19]
    node _T_63 = and(_T_62, rawA_S.sign) @[DivSqrtRecF64_mulAddZ31.scala 188:31]
    node sign_S = xor(_T_63, rawB_S.sign) @[DivSqrtRecF64_mulAddZ31.scala 188:47]
    node _T_64 = or(rawA_S.isNaN, rawA_S.isInf) @[DivSqrtRecF64_mulAddZ31.scala 190:39]
    node specialCaseA_S = or(_T_64, rawA_S.isZero) @[DivSqrtRecF64_mulAddZ31.scala 190:55]
    node _T_65 = or(rawB_S.isNaN, rawB_S.isInf) @[DivSqrtRecF64_mulAddZ31.scala 191:39]
    node specialCaseB_S = or(_T_65, rawB_S.isZero) @[DivSqrtRecF64_mulAddZ31.scala 191:55]
    node _T_66 = eq(specialCaseA_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 192:28]
    node _T_67 = eq(specialCaseB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 192:48]
    node normalCase_S_div = and(_T_66, _T_67) @[DivSqrtRecF64_mulAddZ31.scala 192:45]
    node _T_68 = eq(specialCaseB_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 193:29]
    node _T_69 = eq(rawB_S.sign, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 193:49]
    node normalCase_S_sqrt = and(_T_68, _T_69) @[DivSqrtRecF64_mulAddZ31.scala 193:46]
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 194:27]
    node _T_70 = bits(rawB_S.sExp, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 197:39]
    node _T_71 = bits(rawB_S.sExp, 10, 0) @[DivSqrtRecF64_mulAddZ31.scala 197:57]
    node _T_72 = not(_T_71) @[DivSqrtRecF64_mulAddZ31.scala 197:45]
    node _T_73 = cat(_T_70, _T_72) @[Cat.scala 29:58]
    node _T_74 = asSInt(_T_73) @[DivSqrtRecF64_mulAddZ31.scala 197:66]
    node sExpQuot_S_div = add(rawA_S.sExp, _T_74) @[DivSqrtRecF64_mulAddZ31.scala 197:21]
    node _T_75 = leq(asSInt(UInt<13>("h0e00")), sExpQuot_S_div) @[DivSqrtRecF64_mulAddZ31.scala 200:29]
    node _T_76 = bits(sExpQuot_S_div, 12, 9) @[DivSqrtRecF64_mulAddZ31.scala 202:31]
    node _T_77 = mux(_T_75, UInt<3>("h06"), _T_76) @[DivSqrtRecF64_mulAddZ31.scala 200:16]
    node _T_78 = bits(sExpQuot_S_div, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 204:27]
    node _T_79 = cat(_T_77, _T_78) @[Cat.scala 29:58]
    node sSatExpQuot_S_div = asSInt(_T_79) @[DivSqrtRecF64_mulAddZ31.scala 205:11]
    node cyc_A4_div = and(cyc_S_div, normalCase_S_div) @[DivSqrtRecF64_mulAddZ31.scala 209:50]
    node cyc_A7_sqrt = and(cyc_S_sqrt, normalCase_S_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 210:50]
    node entering_PA_normalCase = or(cyc_A4_div, cyc_A7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 212:36]
    node _T_80 = neq(cycleNum_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 216:49]
    node _T_81 = or(entering_PA_normalCase, _T_80) @[DivSqrtRecF64_mulAddZ31.scala 216:34]
    when _T_81 : @[DivSqrtRecF64_mulAddZ31.scala 216:63]
      node _T_82 = mux(cyc_A4_div, UInt<2>("h03"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 218:16]
      node _T_83 = mux(cyc_A7_sqrt, UInt<3>("h06"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 219:16]
      node _T_84 = or(_T_82, _T_83) @[DivSqrtRecF64_mulAddZ31.scala 218:77]
      node _T_85 = eq(entering_PA_normalCase, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 220:17]
      node _T_86 = sub(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 220:57]
      node _T_87 = tail(_T_86, 1) @[DivSqrtRecF64_mulAddZ31.scala 220:57]
      node _T_88 = mux(_T_85, _T_87, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 220:16]
      node _T_89 = or(_T_84, _T_88) @[DivSqrtRecF64_mulAddZ31.scala 219:77]
      cycleNum_A <= _T_89 @[DivSqrtRecF64_mulAddZ31.scala 217:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 216:63]
    node cyc_A6_sqrt = eq(cycleNum_A, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 224:35]
    node cyc_A5_sqrt = eq(cycleNum_A, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 225:35]
    node cyc_A4_sqrt = eq(cycleNum_A, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 226:35]
    node cyc_A4 = or(cyc_A4_sqrt, cyc_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 230:30]
    node cyc_A3 = eq(cycleNum_A, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 231:30]
    node cyc_A2 = eq(cycleNum_A, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 232:30]
    node cyc_A1 = eq(cycleNum_A, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 233:30]
    node _T_90 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 235:32]
    node cyc_A3_div = and(cyc_A3, _T_90) @[DivSqrtRecF64_mulAddZ31.scala 235:29]
    node _T_91 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 236:32]
    node cyc_A2_div = and(cyc_A2, _T_91) @[DivSqrtRecF64_mulAddZ31.scala 236:29]
    node _T_92 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 237:32]
    node cyc_A1_div = and(cyc_A1, _T_92) @[DivSqrtRecF64_mulAddZ31.scala 237:29]
    node cyc_A3_sqrt = and(cyc_A3, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 239:30]
    node cyc_A2_sqrt = and(cyc_A2, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 240:30]
    node cyc_A1_sqrt = and(cyc_A1, sqrtOp_PA) @[DivSqrtRecF64_mulAddZ31.scala 241:30]
    node _T_93 = neq(cycleNum_B, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 243:33]
    node _T_94 = or(cyc_A1, _T_93) @[DivSqrtRecF64_mulAddZ31.scala 243:18]
    when _T_94 : @[DivSqrtRecF64_mulAddZ31.scala 243:47]
      node _T_95 = mux(sqrtOp_PA, UInt<4>("h0a"), UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 246:20]
      node _T_96 = sub(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 247:28]
      node _T_97 = tail(_T_96, 1) @[DivSqrtRecF64_mulAddZ31.scala 247:28]
      node _T_98 = mux(cyc_A1, _T_95, _T_97) @[DivSqrtRecF64_mulAddZ31.scala 245:16]
      cycleNum_B <= _T_98 @[DivSqrtRecF64_mulAddZ31.scala 244:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 243:47]
    node cyc_B10_sqrt = eq(cycleNum_B, UInt<4>("h0a")) @[DivSqrtRecF64_mulAddZ31.scala 251:36]
    node cyc_B9_sqrt = eq(cycleNum_B, UInt<4>("h09")) @[DivSqrtRecF64_mulAddZ31.scala 252:36]
    node cyc_B8_sqrt = eq(cycleNum_B, UInt<4>("h08")) @[DivSqrtRecF64_mulAddZ31.scala 253:36]
    node cyc_B7_sqrt = eq(cycleNum_B, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 254:36]
    node cyc_B6 = eq(cycleNum_B, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 256:30]
    node cyc_B5 = eq(cycleNum_B, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 257:30]
    node cyc_B4 = eq(cycleNum_B, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 258:30]
    node cyc_B3 = eq(cycleNum_B, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 259:30]
    node cyc_B2 = eq(cycleNum_B, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 260:30]
    node cyc_B1 = eq(cycleNum_B, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 261:30]
    node _T_99 = and(cyc_B6, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 263:29]
    node _T_100 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 263:44]
    node cyc_B6_div = and(_T_99, _T_100) @[DivSqrtRecF64_mulAddZ31.scala 263:41]
    node _T_101 = and(cyc_B5, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 264:29]
    node _T_102 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 264:44]
    node cyc_B5_div = and(_T_101, _T_102) @[DivSqrtRecF64_mulAddZ31.scala 264:41]
    node _T_103 = and(cyc_B4, valid_PA) @[DivSqrtRecF64_mulAddZ31.scala 265:29]
    node _T_104 = eq(sqrtOp_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 265:44]
    node cyc_B4_div = and(_T_103, _T_104) @[DivSqrtRecF64_mulAddZ31.scala 265:41]
    node _T_105 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 266:32]
    node cyc_B3_div = and(cyc_B3, _T_105) @[DivSqrtRecF64_mulAddZ31.scala 266:29]
    node _T_106 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 267:32]
    node cyc_B2_div = and(cyc_B2, _T_106) @[DivSqrtRecF64_mulAddZ31.scala 267:29]
    node _T_107 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 268:32]
    node cyc_B1_div = and(cyc_B1, _T_107) @[DivSqrtRecF64_mulAddZ31.scala 268:29]
    node _T_108 = and(cyc_B6, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 270:30]
    node cyc_B6_sqrt = and(_T_108, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 270:42]
    node _T_109 = and(cyc_B5, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 271:30]
    node cyc_B5_sqrt = and(_T_109, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 271:42]
    node _T_110 = and(cyc_B4, valid_PB) @[DivSqrtRecF64_mulAddZ31.scala 272:30]
    node cyc_B4_sqrt = and(_T_110, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 272:42]
    node cyc_B3_sqrt = and(cyc_B3, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 273:30]
    node cyc_B2_sqrt = and(cyc_B2, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 274:30]
    node cyc_B1_sqrt = and(cyc_B1, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 275:30]
    node _T_111 = neq(cycleNum_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 277:33]
    node _T_112 = or(cyc_B1, _T_111) @[DivSqrtRecF64_mulAddZ31.scala 277:18]
    when _T_112 : @[DivSqrtRecF64_mulAddZ31.scala 277:47]
      node _T_113 = mux(sqrtOp_PB, UInt<3>("h06"), UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 279:28]
      node _T_114 = sub(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 279:70]
      node _T_115 = tail(_T_114, 1) @[DivSqrtRecF64_mulAddZ31.scala 279:70]
      node _T_116 = mux(cyc_B1, _T_113, _T_115) @[DivSqrtRecF64_mulAddZ31.scala 279:16]
      cycleNum_C <= _T_116 @[DivSqrtRecF64_mulAddZ31.scala 278:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 277:47]
    node cyc_C6_sqrt = eq(cycleNum_C, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 282:35]
    node cyc_C5 = eq(cycleNum_C, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 284:30]
    node cyc_C4 = eq(cycleNum_C, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 285:30]
    node cyc_C3 = eq(cycleNum_C, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 286:30]
    node cyc_C2 = eq(cycleNum_C, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 287:30]
    node cyc_C1 = eq(cycleNum_C, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 288:30]
    node _T_117 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 290:32]
    node cyc_C5_div = and(cyc_C5, _T_117) @[DivSqrtRecF64_mulAddZ31.scala 290:29]
    node _T_118 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 291:32]
    node cyc_C4_div = and(cyc_C4, _T_118) @[DivSqrtRecF64_mulAddZ31.scala 291:29]
    node _T_119 = eq(sqrtOp_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 292:32]
    node cyc_C3_div = and(cyc_C3, _T_119) @[DivSqrtRecF64_mulAddZ31.scala 292:29]
    node _T_120 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 293:32]
    node cyc_C2_div = and(cyc_C2, _T_120) @[DivSqrtRecF64_mulAddZ31.scala 293:29]
    node _T_121 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 294:32]
    node cyc_C1_div = and(cyc_C1, _T_121) @[DivSqrtRecF64_mulAddZ31.scala 294:29]
    node cyc_C5_sqrt = and(cyc_C5, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 296:30]
    node cyc_C4_sqrt = and(cyc_C4, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 297:30]
    node cyc_C3_sqrt = and(cyc_C3, sqrtOp_PB) @[DivSqrtRecF64_mulAddZ31.scala 298:30]
    node cyc_C2_sqrt = and(cyc_C2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 299:30]
    node cyc_C1_sqrt = and(cyc_C1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 300:30]
    node _T_122 = neq(cycleNum_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 302:33]
    node _T_123 = or(cyc_C1, _T_122) @[DivSqrtRecF64_mulAddZ31.scala 302:18]
    when _T_123 : @[DivSqrtRecF64_mulAddZ31.scala 302:47]
      node _T_124 = sub(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 303:55]
      node _T_125 = tail(_T_124, 1) @[DivSqrtRecF64_mulAddZ31.scala 303:55]
      node _T_126 = mux(cyc_C1, UInt<3>("h04"), _T_125) @[DivSqrtRecF64_mulAddZ31.scala 303:26]
      cycleNum_E <= _T_126 @[DivSqrtRecF64_mulAddZ31.scala 303:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 302:47]
    node cyc_E4 = eq(cycleNum_E, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 306:30]
    node cyc_E3 = eq(cycleNum_E, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 307:30]
    node cyc_E2 = eq(cycleNum_E, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 308:30]
    node cyc_E1 = eq(cycleNum_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 309:30]
    node _T_127 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 311:32]
    node cyc_E4_div = and(cyc_E4, _T_127) @[DivSqrtRecF64_mulAddZ31.scala 311:29]
    node _T_128 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 312:32]
    node cyc_E3_div = and(cyc_E3, _T_128) @[DivSqrtRecF64_mulAddZ31.scala 312:29]
    node _T_129 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 313:32]
    node cyc_E2_div = and(cyc_E2, _T_129) @[DivSqrtRecF64_mulAddZ31.scala 313:29]
    node _T_130 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 314:32]
    node cyc_E1_div = and(cyc_E1, _T_130) @[DivSqrtRecF64_mulAddZ31.scala 314:29]
    node cyc_E4_sqrt = and(cyc_E4, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 316:30]
    node cyc_E3_sqrt = and(cyc_E3, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 317:30]
    node cyc_E2_sqrt = and(cyc_E2, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 318:30]
    node cyc_E1_sqrt = and(cyc_E1, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 319:30]
    node _T_131 = eq(ready_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 324:58]
    node _T_132 = or(valid_PA, _T_131) @[DivSqrtRecF64_mulAddZ31.scala 324:55]
    node _T_133 = and(cyc_S, _T_132) @[DivSqrtRecF64_mulAddZ31.scala 324:42]
    node entering_PA = or(entering_PA_normalCase, _T_133) @[DivSqrtRecF64_mulAddZ31.scala 324:32]
    node _T_134 = or(entering_PA, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 326:23]
    when _T_134 : @[DivSqrtRecF64_mulAddZ31.scala 326:38]
      valid_PA <= entering_PA @[DivSqrtRecF64_mulAddZ31.scala 327:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 326:38]
    when entering_PA : @[DivSqrtRecF64_mulAddZ31.scala 329:24]
      sqrtOp_PA <= io.sqrtOp @[DivSqrtRecF64_mulAddZ31.scala 330:21]
      majorExc_PA <= majorExc_S @[DivSqrtRecF64_mulAddZ31.scala 331:21]
      isNaN_PA <= isNaN_S @[DivSqrtRecF64_mulAddZ31.scala 332:21]
      isInf_PA <= isInf_S @[DivSqrtRecF64_mulAddZ31.scala 333:21]
      isZero_PA <= isZero_S @[DivSqrtRecF64_mulAddZ31.scala 334:21]
      sign_PA <= sign_S @[DivSqrtRecF64_mulAddZ31.scala 335:21]
      skip @[DivSqrtRecF64_mulAddZ31.scala 329:24]
    when entering_PA_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 337:35]
      node _T_135 = mux(io.sqrtOp, rawB_S.sExp, sSatExpQuot_S_div) @[DivSqrtRecF64_mulAddZ31.scala 338:23]
      sExp_PA <= _T_135 @[DivSqrtRecF64_mulAddZ31.scala 338:17]
      node _T_136 = bits(rawB_S.sig, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 339:32]
      fractB_PA <= _T_136 @[DivSqrtRecF64_mulAddZ31.scala 339:19]
      roundingMode_PA <= io.roundingMode @[DivSqrtRecF64_mulAddZ31.scala 340:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 337:35]
    when cyc_A4_div : @[DivSqrtRecF64_mulAddZ31.scala 342:39]
      node _T_137 = bits(rawA_S.sig, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 343:32]
      fractA_PA <= _T_137 @[DivSqrtRecF64_mulAddZ31.scala 343:19]
      skip @[DivSqrtRecF64_mulAddZ31.scala 342:39]
    node _T_138 = eq(isNaN_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 346:25]
    node _T_139 = eq(isInf_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 346:39]
    node _T_140 = and(_T_138, _T_139) @[DivSqrtRecF64_mulAddZ31.scala 346:36]
    node _T_141 = eq(isZero_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 346:53]
    node normalCase_PA = and(_T_140, _T_141) @[DivSqrtRecF64_mulAddZ31.scala 346:50]
    node sigA_PA = cat(UInt<1>("h01"), fractA_PA) @[Cat.scala 29:58]
    node sigB_PA = cat(UInt<1>("h01"), fractB_PA) @[Cat.scala 29:58]
    node valid_normalCase_leaving_PA = or(cyc_B4_div, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 350:50]
    node valid_leaving_PA = mux(normalCase_PA, valid_normalCase_leaving_PA, ready_PB) @[DivSqrtRecF64_mulAddZ31.scala 352:12]
    node _T_142 = and(valid_PA, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 353:28]
    leaving_PA <= _T_142 @[DivSqrtRecF64_mulAddZ31.scala 353:16]
    node _T_143 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 354:17]
    node _T_144 = or(_T_143, valid_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 354:28]
    ready_PA <= _T_144 @[DivSqrtRecF64_mulAddZ31.scala 354:14]
    node _T_145 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 359:18]
    node _T_146 = and(cyc_S, _T_145) @[DivSqrtRecF64_mulAddZ31.scala 359:15]
    node _T_147 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 359:36]
    node _T_148 = and(_T_146, _T_147) @[DivSqrtRecF64_mulAddZ31.scala 359:33]
    node _T_149 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:29]
    node _T_150 = eq(ready_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 360:43]
    node _T_151 = and(_T_149, _T_150) @[DivSqrtRecF64_mulAddZ31.scala 360:40]
    node _T_152 = or(leaving_PB, _T_151) @[DivSqrtRecF64_mulAddZ31.scala 360:25]
    node entering_PB_S = and(_T_148, _T_152) @[DivSqrtRecF64_mulAddZ31.scala 359:47]
    node _T_153 = and(valid_PA, normalCase_PA) @[DivSqrtRecF64_mulAddZ31.scala 362:18]
    node entering_PB_normalCase = and(_T_153, valid_normalCase_leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 362:35]
    node entering_PB = or(entering_PB_S, leaving_PA) @[DivSqrtRecF64_mulAddZ31.scala 363:37]
    node _T_154 = or(entering_PB, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 365:23]
    when _T_154 : @[DivSqrtRecF64_mulAddZ31.scala 365:38]
      valid_PB <= entering_PB @[DivSqrtRecF64_mulAddZ31.scala 366:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 365:38]
    when entering_PB : @[DivSqrtRecF64_mulAddZ31.scala 368:24]
      node _T_155 = mux(valid_PA, sqrtOp_PA, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 369:27]
      sqrtOp_PB <= _T_155 @[DivSqrtRecF64_mulAddZ31.scala 369:21]
      node _T_156 = mux(valid_PA, majorExc_PA, majorExc_S) @[DivSqrtRecF64_mulAddZ31.scala 370:27]
      majorExc_PB <= _T_156 @[DivSqrtRecF64_mulAddZ31.scala 370:21]
      node _T_157 = mux(valid_PA, isNaN_PA, isNaN_S) @[DivSqrtRecF64_mulAddZ31.scala 371:27]
      isNaN_PB <= _T_157 @[DivSqrtRecF64_mulAddZ31.scala 371:21]
      node _T_158 = mux(valid_PA, isInf_PA, isInf_S) @[DivSqrtRecF64_mulAddZ31.scala 372:27]
      isInf_PB <= _T_158 @[DivSqrtRecF64_mulAddZ31.scala 372:21]
      node _T_159 = mux(valid_PA, isZero_PA, isZero_S) @[DivSqrtRecF64_mulAddZ31.scala 373:27]
      isZero_PB <= _T_159 @[DivSqrtRecF64_mulAddZ31.scala 373:21]
      node _T_160 = mux(valid_PA, sign_PA, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 374:27]
      sign_PB <= _T_160 @[DivSqrtRecF64_mulAddZ31.scala 374:21]
      skip @[DivSqrtRecF64_mulAddZ31.scala 368:24]
    when entering_PB_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 376:35]
      sExp_PB <= sExp_PA @[DivSqrtRecF64_mulAddZ31.scala 377:25]
      node _T_161 = bits(fractA_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 378:37]
      bit0FractA_PB <= _T_161 @[DivSqrtRecF64_mulAddZ31.scala 378:25]
      fractB_PB <= fractB_PA @[DivSqrtRecF64_mulAddZ31.scala 379:25]
      node _T_162 = mux(valid_PA, roundingMode_PA, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 380:31]
      roundingMode_PB <= _T_162 @[DivSqrtRecF64_mulAddZ31.scala 380:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 376:35]
    node _T_163 = eq(isNaN_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 383:25]
    node _T_164 = eq(isInf_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 383:39]
    node _T_165 = and(_T_163, _T_164) @[DivSqrtRecF64_mulAddZ31.scala 383:36]
    node _T_166 = eq(isZero_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 383:53]
    node normalCase_PB = and(_T_165, _T_166) @[DivSqrtRecF64_mulAddZ31.scala 383:50]
    node valid_leaving_PB = mux(normalCase_PB, cyc_C3, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 387:12]
    node _T_167 = and(valid_PB, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 388:28]
    leaving_PB <= _T_167 @[DivSqrtRecF64_mulAddZ31.scala 388:16]
    node _T_168 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 389:17]
    node _T_169 = or(_T_168, valid_leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 389:28]
    ready_PB <= _T_169 @[DivSqrtRecF64_mulAddZ31.scala 389:14]
    node _T_170 = eq(normalCase_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 394:18]
    node _T_171 = and(cyc_S, _T_170) @[DivSqrtRecF64_mulAddZ31.scala 394:15]
    node _T_172 = eq(valid_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 394:36]
    node _T_173 = and(_T_171, _T_172) @[DivSqrtRecF64_mulAddZ31.scala 394:33]
    node _T_174 = eq(valid_PB, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 394:50]
    node _T_175 = and(_T_173, _T_174) @[DivSqrtRecF64_mulAddZ31.scala 394:47]
    node entering_PC_S = and(_T_175, ready_PC) @[DivSqrtRecF64_mulAddZ31.scala 394:61]
    node _T_176 = and(valid_PB, normalCase_PB) @[DivSqrtRecF64_mulAddZ31.scala 396:18]
    node entering_PC_normalCase = and(_T_176, cyc_C3) @[DivSqrtRecF64_mulAddZ31.scala 396:35]
    node entering_PC = or(entering_PC_S, leaving_PB) @[DivSqrtRecF64_mulAddZ31.scala 397:37]
    node _T_177 = or(entering_PC, leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 399:23]
    when _T_177 : @[DivSqrtRecF64_mulAddZ31.scala 399:38]
      valid_PC <= entering_PC @[DivSqrtRecF64_mulAddZ31.scala 400:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 399:38]
    when entering_PC : @[DivSqrtRecF64_mulAddZ31.scala 402:24]
      node _T_178 = mux(valid_PB, sqrtOp_PB, io.sqrtOp) @[DivSqrtRecF64_mulAddZ31.scala 403:27]
      sqrtOp_PC <= _T_178 @[DivSqrtRecF64_mulAddZ31.scala 403:21]
      node _T_179 = mux(valid_PB, majorExc_PB, majorExc_S) @[DivSqrtRecF64_mulAddZ31.scala 404:27]
      majorExc_PC <= _T_179 @[DivSqrtRecF64_mulAddZ31.scala 404:21]
      node _T_180 = mux(valid_PB, isNaN_PB, isNaN_S) @[DivSqrtRecF64_mulAddZ31.scala 405:27]
      isNaN_PC <= _T_180 @[DivSqrtRecF64_mulAddZ31.scala 405:21]
      node _T_181 = mux(valid_PB, isInf_PB, isInf_S) @[DivSqrtRecF64_mulAddZ31.scala 406:27]
      isInf_PC <= _T_181 @[DivSqrtRecF64_mulAddZ31.scala 406:21]
      node _T_182 = mux(valid_PB, isZero_PB, isZero_S) @[DivSqrtRecF64_mulAddZ31.scala 407:27]
      isZero_PC <= _T_182 @[DivSqrtRecF64_mulAddZ31.scala 407:21]
      node _T_183 = mux(valid_PB, sign_PB, sign_S) @[DivSqrtRecF64_mulAddZ31.scala 408:27]
      sign_PC <= _T_183 @[DivSqrtRecF64_mulAddZ31.scala 408:21]
      skip @[DivSqrtRecF64_mulAddZ31.scala 402:24]
    when entering_PC_normalCase : @[DivSqrtRecF64_mulAddZ31.scala 410:35]
      sExp_PC <= sExp_PB @[DivSqrtRecF64_mulAddZ31.scala 411:25]
      bit0FractA_PC <= bit0FractA_PB @[DivSqrtRecF64_mulAddZ31.scala 412:25]
      fractB_PC <= fractB_PB @[DivSqrtRecF64_mulAddZ31.scala 413:25]
      node _T_184 = mux(valid_PB, roundingMode_PB, io.roundingMode) @[DivSqrtRecF64_mulAddZ31.scala 414:31]
      roundingMode_PC <= _T_184 @[DivSqrtRecF64_mulAddZ31.scala 414:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 410:35]
    node _T_185 = eq(isNaN_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 417:25]
    node _T_186 = eq(isInf_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 417:39]
    node _T_187 = and(_T_185, _T_186) @[DivSqrtRecF64_mulAddZ31.scala 417:36]
    node _T_188 = eq(isZero_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 417:53]
    node normalCase_PC = and(_T_187, _T_188) @[DivSqrtRecF64_mulAddZ31.scala 417:50]
    node sigB_PC = cat(UInt<1>("h01"), fractB_PC) @[Cat.scala 29:58]
    node _T_189 = eq(normalCase_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 420:28]
    node valid_leaving_PC = or(_T_189, cyc_E1) @[DivSqrtRecF64_mulAddZ31.scala 420:44]
    node _T_190 = and(valid_PC, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 421:28]
    leaving_PC <= _T_190 @[DivSqrtRecF64_mulAddZ31.scala 421:16]
    node _T_191 = eq(valid_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 422:17]
    node _T_192 = or(_T_191, valid_leaving_PC) @[DivSqrtRecF64_mulAddZ31.scala 422:28]
    ready_PC <= _T_192 @[DivSqrtRecF64_mulAddZ31.scala 422:14]
    node _T_193 = eq(cyc_B7_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 429:21]
    node _T_194 = and(ready_PA, _T_193) @[DivSqrtRecF64_mulAddZ31.scala 429:18]
    node _T_195 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 429:38]
    node _T_196 = and(_T_194, _T_195) @[DivSqrtRecF64_mulAddZ31.scala 429:35]
    node _T_197 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 429:55]
    node _T_198 = and(_T_196, _T_197) @[DivSqrtRecF64_mulAddZ31.scala 429:52]
    node _T_199 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 430:13]
    node _T_200 = and(_T_198, _T_199) @[DivSqrtRecF64_mulAddZ31.scala 429:69]
    node _T_201 = eq(cyc_B3, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 430:30]
    node _T_202 = and(_T_200, _T_201) @[DivSqrtRecF64_mulAddZ31.scala 430:27]
    node _T_203 = eq(cyc_B2, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 430:42]
    node _T_204 = and(_T_202, _T_203) @[DivSqrtRecF64_mulAddZ31.scala 430:39]
    node _T_205 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 430:54]
    node _T_206 = and(_T_204, _T_205) @[DivSqrtRecF64_mulAddZ31.scala 430:51]
    node _T_207 = eq(cyc_C5, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 431:13]
    node _T_208 = and(_T_206, _T_207) @[DivSqrtRecF64_mulAddZ31.scala 430:68]
    node _T_209 = eq(cyc_C4, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 431:25]
    node _T_210 = and(_T_208, _T_209) @[DivSqrtRecF64_mulAddZ31.scala 431:22]
    io.inReady_div <= _T_210 @[DivSqrtRecF64_mulAddZ31.scala 427:20]
    node _T_211 = eq(cyc_B6_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 433:21]
    node _T_212 = and(ready_PA, _T_211) @[DivSqrtRecF64_mulAddZ31.scala 433:18]
    node _T_213 = eq(cyc_B5_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 433:38]
    node _T_214 = and(_T_212, _T_213) @[DivSqrtRecF64_mulAddZ31.scala 433:35]
    node _T_215 = eq(cyc_B4_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 433:55]
    node _T_216 = and(_T_214, _T_215) @[DivSqrtRecF64_mulAddZ31.scala 433:52]
    node _T_217 = eq(cyc_B2_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 434:13]
    node _T_218 = and(_T_216, _T_217) @[DivSqrtRecF64_mulAddZ31.scala 433:69]
    node _T_219 = eq(cyc_B1_sqrt, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 434:29]
    node _T_220 = and(_T_218, _T_219) @[DivSqrtRecF64_mulAddZ31.scala 434:26]
    io.inReady_sqrt <= _T_220 @[DivSqrtRecF64_mulAddZ31.scala 432:21]
    node _T_221 = bits(rawB_S.sig, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 439:52]
    node zFractB_A4_div = mux(cyc_A4_div, _T_221, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 439:29]
    node _T_222 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 441:55]
    node _T_223 = eq(_T_222, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 441:64]
    node zLinPiece_0_A4_div = and(cyc_A4_div, _T_223) @[DivSqrtRecF64_mulAddZ31.scala 441:41]
    node _T_224 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 442:55]
    node _T_225 = eq(_T_224, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 442:64]
    node zLinPiece_1_A4_div = and(cyc_A4_div, _T_225) @[DivSqrtRecF64_mulAddZ31.scala 442:41]
    node _T_226 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 443:55]
    node _T_227 = eq(_T_226, UInt<2>("h02")) @[DivSqrtRecF64_mulAddZ31.scala 443:64]
    node zLinPiece_2_A4_div = and(cyc_A4_div, _T_227) @[DivSqrtRecF64_mulAddZ31.scala 443:41]
    node _T_228 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 444:55]
    node _T_229 = eq(_T_228, UInt<2>("h03")) @[DivSqrtRecF64_mulAddZ31.scala 444:64]
    node zLinPiece_3_A4_div = and(cyc_A4_div, _T_229) @[DivSqrtRecF64_mulAddZ31.scala 444:41]
    node _T_230 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 445:55]
    node _T_231 = eq(_T_230, UInt<3>("h04")) @[DivSqrtRecF64_mulAddZ31.scala 445:64]
    node zLinPiece_4_A4_div = and(cyc_A4_div, _T_231) @[DivSqrtRecF64_mulAddZ31.scala 445:41]
    node _T_232 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 446:55]
    node _T_233 = eq(_T_232, UInt<3>("h05")) @[DivSqrtRecF64_mulAddZ31.scala 446:64]
    node zLinPiece_5_A4_div = and(cyc_A4_div, _T_233) @[DivSqrtRecF64_mulAddZ31.scala 446:41]
    node _T_234 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 447:55]
    node _T_235 = eq(_T_234, UInt<3>("h06")) @[DivSqrtRecF64_mulAddZ31.scala 447:64]
    node zLinPiece_6_A4_div = and(cyc_A4_div, _T_235) @[DivSqrtRecF64_mulAddZ31.scala 447:41]
    node _T_236 = bits(rawB_S.sig, 51, 49) @[DivSqrtRecF64_mulAddZ31.scala 448:55]
    node _T_237 = eq(_T_236, UInt<3>("h07")) @[DivSqrtRecF64_mulAddZ31.scala 448:64]
    node zLinPiece_7_A4_div = and(cyc_A4_div, _T_237) @[DivSqrtRecF64_mulAddZ31.scala 448:41]
    node _T_238 = mux(zLinPiece_0_A4_div, UInt<9>("h01c7"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 450:12]
    node _T_239 = mux(zLinPiece_1_A4_div, UInt<9>("h016c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 451:12]
    node _T_240 = or(_T_238, _T_239) @[DivSqrtRecF64_mulAddZ31.scala 450:56]
    node _T_241 = mux(zLinPiece_2_A4_div, UInt<9>("h012a"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 452:12]
    node _T_242 = or(_T_240, _T_241) @[DivSqrtRecF64_mulAddZ31.scala 451:56]
    node _T_243 = mux(zLinPiece_3_A4_div, UInt<8>("h0f8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 453:12]
    node _T_244 = or(_T_242, _T_243) @[DivSqrtRecF64_mulAddZ31.scala 452:56]
    node _T_245 = mux(zLinPiece_4_A4_div, UInt<8>("h0d2"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 454:12]
    node _T_246 = or(_T_244, _T_245) @[DivSqrtRecF64_mulAddZ31.scala 453:56]
    node _T_247 = mux(zLinPiece_5_A4_div, UInt<8>("h0b4"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 455:12]
    node _T_248 = or(_T_246, _T_247) @[DivSqrtRecF64_mulAddZ31.scala 454:56]
    node _T_249 = mux(zLinPiece_6_A4_div, UInt<8>("h09c"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 456:12]
    node _T_250 = or(_T_248, _T_249) @[DivSqrtRecF64_mulAddZ31.scala 455:56]
    node _T_251 = mux(zLinPiece_7_A4_div, UInt<8>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 457:12]
    node zK1_A4_div = or(_T_250, _T_251) @[DivSqrtRecF64_mulAddZ31.scala 456:56]
    node _T_252 = not(UInt<12>("h0fe3")) @[DivSqrtRecF64_mulAddZ31.scala 459:33]
    node _T_253 = mux(zLinPiece_0_A4_div, _T_252, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 459:12]
    node _T_254 = not(UInt<12>("h0c5d")) @[DivSqrtRecF64_mulAddZ31.scala 460:33]
    node _T_255 = mux(zLinPiece_1_A4_div, _T_254, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 460:12]
    node _T_256 = or(_T_253, _T_255) @[DivSqrtRecF64_mulAddZ31.scala 459:61]
    node _T_257 = not(UInt<12>("h098a")) @[DivSqrtRecF64_mulAddZ31.scala 461:33]
    node _T_258 = mux(zLinPiece_2_A4_div, _T_257, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 461:12]
    node _T_259 = or(_T_256, _T_258) @[DivSqrtRecF64_mulAddZ31.scala 460:61]
    node _T_260 = not(UInt<12>("h0739")) @[DivSqrtRecF64_mulAddZ31.scala 462:33]
    node _T_261 = mux(zLinPiece_3_A4_div, _T_260, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 462:12]
    node _T_262 = or(_T_259, _T_261) @[DivSqrtRecF64_mulAddZ31.scala 461:61]
    node _T_263 = not(UInt<12>("h054b")) @[DivSqrtRecF64_mulAddZ31.scala 463:33]
    node _T_264 = mux(zLinPiece_4_A4_div, _T_263, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 463:12]
    node _T_265 = or(_T_262, _T_264) @[DivSqrtRecF64_mulAddZ31.scala 462:61]
    node _T_266 = not(UInt<12>("h03a9")) @[DivSqrtRecF64_mulAddZ31.scala 464:33]
    node _T_267 = mux(zLinPiece_5_A4_div, _T_266, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 464:12]
    node _T_268 = or(_T_265, _T_267) @[DivSqrtRecF64_mulAddZ31.scala 463:61]
    node _T_269 = not(UInt<12>("h0242")) @[DivSqrtRecF64_mulAddZ31.scala 465:33]
    node _T_270 = mux(zLinPiece_6_A4_div, _T_269, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 465:12]
    node _T_271 = or(_T_268, _T_270) @[DivSqrtRecF64_mulAddZ31.scala 464:61]
    node _T_272 = not(UInt<12>("h010b")) @[DivSqrtRecF64_mulAddZ31.scala 466:33]
    node _T_273 = mux(zLinPiece_7_A4_div, _T_272, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 466:12]
    node zComplFractK0_A4_div = or(_T_271, _T_273) @[DivSqrtRecF64_mulAddZ31.scala 465:61]
    node _T_274 = bits(rawB_S.sig, 51, 0) @[DivSqrtRecF64_mulAddZ31.scala 468:54]
    node zFractB_A7_sqrt = mux(cyc_A7_sqrt, _T_274, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 468:30]
    node _T_275 = bits(rawB_S.sExp, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 471:37]
    node _T_276 = eq(_T_275, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 471:24]
    node _T_277 = and(cyc_A7_sqrt, _T_276) @[DivSqrtRecF64_mulAddZ31.scala 471:21]
    node _T_278 = bits(rawB_S.sig, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 471:56]
    node _T_279 = eq(_T_278, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 471:44]
    node zQuadPiece_0_A7_sqrt = and(_T_277, _T_279) @[DivSqrtRecF64_mulAddZ31.scala 471:41]
    node _T_280 = bits(rawB_S.sExp, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 473:37]
    node _T_281 = eq(_T_280, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 473:24]
    node _T_282 = and(cyc_A7_sqrt, _T_281) @[DivSqrtRecF64_mulAddZ31.scala 473:21]
    node _T_283 = bits(rawB_S.sig, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 473:56]
    node zQuadPiece_1_A7_sqrt = and(_T_282, _T_283) @[DivSqrtRecF64_mulAddZ31.scala 473:41]
    node _T_284 = bits(rawB_S.sExp, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 475:37]
    node _T_285 = and(cyc_A7_sqrt, _T_284) @[DivSqrtRecF64_mulAddZ31.scala 475:21]
    node _T_286 = bits(rawB_S.sig, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 475:56]
    node _T_287 = eq(_T_286, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 475:44]
    node zQuadPiece_2_A7_sqrt = and(_T_285, _T_287) @[DivSqrtRecF64_mulAddZ31.scala 475:41]
    node _T_288 = bits(rawB_S.sExp, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 476:58]
    node _T_289 = and(cyc_A7_sqrt, _T_288) @[DivSqrtRecF64_mulAddZ31.scala 476:44]
    node _T_290 = bits(rawB_S.sig, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 476:75]
    node zQuadPiece_3_A7_sqrt = and(_T_289, _T_290) @[DivSqrtRecF64_mulAddZ31.scala 476:62]
    node _T_291 = mux(zQuadPiece_0_A7_sqrt, UInt<9>("h01c8"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 478:12]
    node _T_292 = mux(zQuadPiece_1_A7_sqrt, UInt<8>("h0c1"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 479:12]
    node _T_293 = or(_T_291, _T_292) @[DivSqrtRecF64_mulAddZ31.scala 478:58]
    node _T_294 = mux(zQuadPiece_2_A7_sqrt, UInt<9>("h0143"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 480:12]
    node _T_295 = or(_T_293, _T_294) @[DivSqrtRecF64_mulAddZ31.scala 479:58]
    node _T_296 = mux(zQuadPiece_3_A7_sqrt, UInt<8>("h089"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 481:12]
    node zK2_A7_sqrt = or(_T_295, _T_296) @[DivSqrtRecF64_mulAddZ31.scala 480:58]
    node _T_297 = not(UInt<10>("h03d0")) @[DivSqrtRecF64_mulAddZ31.scala 483:35]
    node _T_298 = mux(zQuadPiece_0_A7_sqrt, _T_297, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 483:12]
    node _T_299 = not(UInt<10>("h0220")) @[DivSqrtRecF64_mulAddZ31.scala 484:35]
    node _T_300 = mux(zQuadPiece_1_A7_sqrt, _T_299, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 484:12]
    node _T_301 = or(_T_298, _T_300) @[DivSqrtRecF64_mulAddZ31.scala 483:63]
    node _T_302 = not(UInt<10>("h02b2")) @[DivSqrtRecF64_mulAddZ31.scala 485:35]
    node _T_303 = mux(zQuadPiece_2_A7_sqrt, _T_302, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 485:12]
    node _T_304 = or(_T_301, _T_303) @[DivSqrtRecF64_mulAddZ31.scala 484:63]
    node _T_305 = not(UInt<10>("h0181")) @[DivSqrtRecF64_mulAddZ31.scala 486:35]
    node _T_306 = mux(zQuadPiece_3_A7_sqrt, _T_305, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 486:12]
    node zComplK1_A7_sqrt = or(_T_304, _T_306) @[DivSqrtRecF64_mulAddZ31.scala 485:63]
    node _T_307 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 488:56]
    node _T_308 = eq(_T_307, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 488:47]
    node _T_309 = and(cyc_A6_sqrt, _T_308) @[DivSqrtRecF64_mulAddZ31.scala 488:44]
    node _T_310 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 488:72]
    node _T_311 = eq(_T_310, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 488:63]
    node zQuadPiece_0_A6_sqrt = and(_T_309, _T_311) @[DivSqrtRecF64_mulAddZ31.scala 488:60]
    node _T_312 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 489:56]
    node _T_313 = eq(_T_312, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 489:47]
    node _T_314 = and(cyc_A6_sqrt, _T_313) @[DivSqrtRecF64_mulAddZ31.scala 489:44]
    node _T_315 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 489:72]
    node zQuadPiece_1_A6_sqrt = and(_T_314, _T_315) @[DivSqrtRecF64_mulAddZ31.scala 489:60]
    node _T_316 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 490:56]
    node _T_317 = and(cyc_A6_sqrt, _T_316) @[DivSqrtRecF64_mulAddZ31.scala 490:44]
    node _T_318 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 490:72]
    node _T_319 = eq(_T_318, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 490:63]
    node zQuadPiece_2_A6_sqrt = and(_T_317, _T_319) @[DivSqrtRecF64_mulAddZ31.scala 490:60]
    node _T_320 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 491:56]
    node _T_321 = and(cyc_A6_sqrt, _T_320) @[DivSqrtRecF64_mulAddZ31.scala 491:44]
    node _T_322 = bits(sigB_PA, 51, 51) @[DivSqrtRecF64_mulAddZ31.scala 491:72]
    node zQuadPiece_3_A6_sqrt = and(_T_321, _T_322) @[DivSqrtRecF64_mulAddZ31.scala 491:60]
    node _T_323 = not(UInt<13>("h01fe5")) @[DivSqrtRecF64_mulAddZ31.scala 493:35]
    node _T_324 = mux(zQuadPiece_0_A6_sqrt, _T_323, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 493:12]
    node _T_325 = not(UInt<13>("h01435")) @[DivSqrtRecF64_mulAddZ31.scala 494:35]
    node _T_326 = mux(zQuadPiece_1_A6_sqrt, _T_325, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 494:12]
    node _T_327 = or(_T_324, _T_326) @[DivSqrtRecF64_mulAddZ31.scala 493:64]
    node _T_328 = not(UInt<13>("h0d2c")) @[DivSqrtRecF64_mulAddZ31.scala 495:35]
    node _T_329 = mux(zQuadPiece_2_A6_sqrt, _T_328, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 495:12]
    node _T_330 = or(_T_327, _T_329) @[DivSqrtRecF64_mulAddZ31.scala 494:64]
    node _T_331 = not(UInt<13>("h04e8")) @[DivSqrtRecF64_mulAddZ31.scala 496:35]
    node _T_332 = mux(zQuadPiece_3_A6_sqrt, _T_331, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 496:12]
    node zComplFractK0_A6_sqrt = or(_T_330, _T_332) @[DivSqrtRecF64_mulAddZ31.scala 495:64]
    node _T_333 = bits(zFractB_A4_div, 48, 40) @[DivSqrtRecF64_mulAddZ31.scala 499:23]
    node _T_334 = or(_T_333, zK2_A7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 499:32]
    node _T_335 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 500:17]
    node _T_336 = mux(_T_335, nextMulAdd9A_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 500:16]
    node mulAdd9A_A = or(_T_334, _T_336) @[DivSqrtRecF64_mulAddZ31.scala 499:46]
    node _T_337 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 502:37]
    node _T_338 = or(zK1_A4_div, _T_337) @[DivSqrtRecF64_mulAddZ31.scala 502:20]
    node _T_339 = eq(cyc_S, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 503:17]
    node _T_340 = mux(_T_339, nextMulAdd9B_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 503:16]
    node mulAdd9B_A = or(_T_338, _T_340) @[DivSqrtRecF64_mulAddZ31.scala 502:46]
    node _T_341 = bits(cyc_A7_sqrt, 0, 0) @[Bitwise.scala 72:15]
    node _T_342 = mux(_T_341, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 72:12]
    node _T_343 = cat(zComplK1_A7_sqrt, _T_342) @[Cat.scala 29:58]
    node _T_344 = bits(cyc_A6_sqrt, 0, 0) @[Bitwise.scala 72:15]
    node _T_345 = mux(_T_344, UInt<6>("h03f"), UInt<6>("h00")) @[Bitwise.scala 72:12]
    node _T_346 = cat(cyc_A6_sqrt, zComplFractK0_A6_sqrt) @[Cat.scala 29:58]
    node _T_347 = cat(_T_346, _T_345) @[Cat.scala 29:58]
    node _T_348 = or(_T_343, _T_347) @[DivSqrtRecF64_mulAddZ31.scala 506:71]
    node _T_349 = bits(cyc_A4_div, 0, 0) @[Bitwise.scala 72:15]
    node _T_350 = mux(_T_349, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_351 = cat(cyc_A4_div, zComplFractK0_A4_div) @[Cat.scala 29:58]
    node _T_352 = cat(_T_351, _T_350) @[Cat.scala 29:58]
    node _T_353 = or(_T_348, _T_352) @[DivSqrtRecF64_mulAddZ31.scala 507:71]
    node _T_354 = shl(fractR0_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 509:55]
    node _T_355 = add(UInt<19>("h040000"), _T_354) @[DivSqrtRecF64_mulAddZ31.scala 509:42]
    node _T_356 = mux(cyc_A5_sqrt, _T_355, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 509:12]
    node _T_357 = or(_T_353, _T_356) @[DivSqrtRecF64_mulAddZ31.scala 508:71]
    node _T_358 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 510:44]
    node _T_359 = eq(_T_358, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 510:28]
    node _T_360 = and(cyc_A4_sqrt, _T_359) @[DivSqrtRecF64_mulAddZ31.scala 510:25]
    node _T_361 = mux(_T_360, UInt<11>("h0400"), UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 510:12]
    node _T_362 = or(_T_357, _T_361) @[DivSqrtRecF64_mulAddZ31.scala 509:71]
    node _T_363 = bits(hiSqrR0_A_sqrt, 9, 9) @[DivSqrtRecF64_mulAddZ31.scala 511:43]
    node _T_364 = and(cyc_A4_sqrt, _T_363) @[DivSqrtRecF64_mulAddZ31.scala 511:26]
    node _T_365 = or(_T_364, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 511:48]
    node _T_366 = bits(sigB_PA, 46, 26) @[DivSqrtRecF64_mulAddZ31.scala 512:20]
    node _T_367 = add(_T_366, UInt<11>("h0400")) @[DivSqrtRecF64_mulAddZ31.scala 512:29]
    node _T_368 = tail(_T_367, 1) @[DivSqrtRecF64_mulAddZ31.scala 512:29]
    node _T_369 = mux(_T_365, _T_368, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 511:12]
    node _T_370 = or(_T_362, _T_369) @[DivSqrtRecF64_mulAddZ31.scala 510:71]
    node _T_371 = or(cyc_A3_sqrt, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 515:25]
    node _T_372 = mux(_T_371, partNegSigma0_A, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 515:12]
    node _T_373 = or(_T_370, _T_372) @[DivSqrtRecF64_mulAddZ31.scala 514:11]
    node _T_374 = shl(fractR0_A, 16) @[DivSqrtRecF64_mulAddZ31.scala 516:45]
    node _T_375 = mux(cyc_A1_sqrt, _T_374, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 516:12]
    node _T_376 = or(_T_373, _T_375) @[DivSqrtRecF64_mulAddZ31.scala 515:62]
    node _T_377 = shl(fractR0_A, 15) @[DivSqrtRecF64_mulAddZ31.scala 517:45]
    node _T_378 = mux(cyc_A1_div, _T_377, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 517:12]
    node mulAdd9C_A = or(_T_376, _T_378) @[DivSqrtRecF64_mulAddZ31.scala 516:62]
    node _T_379 = mul(mulAdd9A_A, mulAdd9B_A) @[DivSqrtRecF64_mulAddZ31.scala 518:37]
    node _T_380 = bits(mulAdd9C_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 518:63]
    node loMulAdd9Out_A = add(_T_379, _T_380) @[DivSqrtRecF64_mulAddZ31.scala 518:50]
    node _T_381 = bits(loMulAdd9Out_A, 18, 18) @[DivSqrtRecF64_mulAddZ31.scala 520:31]
    node _T_382 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 521:27]
    node _T_383 = add(_T_382, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 521:36]
    node _T_384 = tail(_T_383, 1) @[DivSqrtRecF64_mulAddZ31.scala 521:36]
    node _T_385 = bits(mulAdd9C_A, 24, 18) @[DivSqrtRecF64_mulAddZ31.scala 522:27]
    node _T_386 = mux(_T_381, _T_384, _T_385) @[DivSqrtRecF64_mulAddZ31.scala 520:16]
    node _T_387 = bits(loMulAdd9Out_A, 17, 0) @[DivSqrtRecF64_mulAddZ31.scala 524:27]
    node mulAdd9Out_A = cat(_T_386, _T_387) @[Cat.scala 29:58]
    node _T_388 = bits(mulAdd9Out_A, 19, 19) @[DivSqrtRecF64_mulAddZ31.scala 528:40]
    node _T_389 = and(cyc_A6_sqrt, _T_388) @[DivSqrtRecF64_mulAddZ31.scala 528:25]
    node _T_390 = shr(mulAdd9Out_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 528:60]
    node _T_391 = not(_T_390) @[DivSqrtRecF64_mulAddZ31.scala 528:46]
    node zFractR0_A6_sqrt = mux(_T_389, _T_391, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 528:12]
    node _T_392 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 532:36]
    node _T_393 = shl(mulAdd9Out_A, 1) @[DivSqrtRecF64_mulAddZ31.scala 532:53]
    node sqrR0_A5_sqrt = mux(_T_392, _T_393, mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 532:28]
    node _T_394 = bits(mulAdd9Out_A, 20, 20) @[DivSqrtRecF64_mulAddZ31.scala 534:39]
    node _T_395 = and(cyc_A4_div, _T_394) @[DivSqrtRecF64_mulAddZ31.scala 534:24]
    node _T_396 = shr(mulAdd9Out_A, 11) @[DivSqrtRecF64_mulAddZ31.scala 534:59]
    node _T_397 = not(_T_396) @[DivSqrtRecF64_mulAddZ31.scala 534:45]
    node zFractR0_A4_div = mux(_T_395, _T_397, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 534:12]
    node _T_398 = bits(mulAdd9Out_A, 11, 11) @[DivSqrtRecF64_mulAddZ31.scala 536:35]
    node _T_399 = and(cyc_A2, _T_398) @[DivSqrtRecF64_mulAddZ31.scala 536:20]
    node _T_400 = shr(mulAdd9Out_A, 2) @[DivSqrtRecF64_mulAddZ31.scala 536:55]
    node _T_401 = not(_T_400) @[DivSqrtRecF64_mulAddZ31.scala 536:41]
    node zSigma0_A2 = mux(_T_399, _T_401, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 536:12]
    node _T_402 = shr(mulAdd9Out_A, 10) @[DivSqrtRecF64_mulAddZ31.scala 537:58]
    node _T_403 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 537:76]
    node _T_404 = mux(sqrtOp_PA, _T_402, _T_403) @[DivSqrtRecF64_mulAddZ31.scala 537:34]
    node r1_A1 = or(UInt<16>("h08000"), _T_404) @[DivSqrtRecF64_mulAddZ31.scala 537:29]
    node _T_405 = bits(sExp_PA, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 538:34]
    node _T_406 = shl(r1_A1, 1) @[DivSqrtRecF64_mulAddZ31.scala 538:44]
    node ER1_A1_sqrt = mux(_T_405, _T_406, r1_A1) @[DivSqrtRecF64_mulAddZ31.scala 538:26]
    node _T_407 = or(cyc_A6_sqrt, cyc_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 540:23]
    when _T_407 : @[DivSqrtRecF64_mulAddZ31.scala 540:38]
      node _T_408 = or(zFractR0_A6_sqrt, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 541:39]
      fractR0_A <= _T_408 @[DivSqrtRecF64_mulAddZ31.scala 541:19]
      skip @[DivSqrtRecF64_mulAddZ31.scala 540:38]
    when cyc_A5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 543:24]
      node _T_409 = shr(sqrR0_A5_sqrt, 10) @[DivSqrtRecF64_mulAddZ31.scala 544:40]
      hiSqrR0_A_sqrt <= _T_409 @[DivSqrtRecF64_mulAddZ31.scala 544:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 543:24]
    node _T_410 = or(cyc_A4_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 546:23]
    when _T_410 : @[DivSqrtRecF64_mulAddZ31.scala 546:34]
      node _T_411 = shr(mulAdd9Out_A, 9) @[DivSqrtRecF64_mulAddZ31.scala 547:71]
      node _T_412 = mux(cyc_A4_sqrt, mulAdd9Out_A, _T_411) @[DivSqrtRecF64_mulAddZ31.scala 547:31]
      partNegSigma0_A <= _T_412 @[DivSqrtRecF64_mulAddZ31.scala 547:25]
      skip @[DivSqrtRecF64_mulAddZ31.scala 546:34]
    node _T_413 = or(cyc_A7_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 550:21]
    node _T_414 = or(_T_413, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 550:36]
    node _T_415 = or(_T_414, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 550:51]
    node _T_416 = or(_T_415, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 550:61]
    node _T_417 = or(_T_416, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 550:71]
    when _T_417 : @[DivSqrtRecF64_mulAddZ31.scala 551:7]
      node _T_418 = not(mulAdd9Out_A) @[DivSqrtRecF64_mulAddZ31.scala 553:40]
      node _T_419 = shr(_T_418, 11) @[DivSqrtRecF64_mulAddZ31.scala 553:53]
      node _T_420 = mux(cyc_A7_sqrt, _T_419, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 553:16]
      node _T_421 = or(_T_420, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 553:68]
      node _T_422 = bits(sigB_PA, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 555:47]
      node _T_423 = mux(cyc_A4_sqrt, _T_422, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 555:16]
      node _T_424 = or(_T_421, _T_423) @[DivSqrtRecF64_mulAddZ31.scala 554:68]
      node _T_425 = bits(zFractB_A4_div, 43, 35) @[DivSqrtRecF64_mulAddZ31.scala 556:27]
      node _T_426 = or(_T_424, _T_425) @[DivSqrtRecF64_mulAddZ31.scala 555:68]
      node _T_427 = or(cyc_A5_sqrt, cyc_A3) @[DivSqrtRecF64_mulAddZ31.scala 557:29]
      node _T_428 = bits(sigB_PA, 52, 44) @[DivSqrtRecF64_mulAddZ31.scala 557:47]
      node _T_429 = mux(_T_427, _T_428, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 557:16]
      node _T_430 = or(_T_426, _T_429) @[DivSqrtRecF64_mulAddZ31.scala 556:68]
      node _T_431 = or(_T_430, zSigma0_A2) @[DivSqrtRecF64_mulAddZ31.scala 557:68]
      nextMulAdd9A_A <= _T_431 @[DivSqrtRecF64_mulAddZ31.scala 552:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 551:7]
    node _T_432 = or(cyc_A7_sqrt, cyc_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 560:23]
    node _T_433 = or(_T_432, cyc_A5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 560:38]
    node _T_434 = or(_T_433, cyc_A4) @[DivSqrtRecF64_mulAddZ31.scala 560:53]
    node _T_435 = or(_T_434, cyc_A2) @[DivSqrtRecF64_mulAddZ31.scala 560:63]
    when _T_435 : @[DivSqrtRecF64_mulAddZ31.scala 560:74]
      node _T_436 = bits(zFractB_A7_sqrt, 50, 42) @[DivSqrtRecF64_mulAddZ31.scala 562:28]
      node _T_437 = or(_T_436, zFractR0_A6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 562:73]
      node _T_438 = bits(sqrR0_A5_sqrt, 9, 1) @[DivSqrtRecF64_mulAddZ31.scala 564:43]
      node _T_439 = mux(cyc_A5_sqrt, _T_438, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 564:16]
      node _T_440 = or(_T_437, _T_439) @[DivSqrtRecF64_mulAddZ31.scala 563:73]
      node _T_441 = or(_T_440, zFractR0_A4_div) @[DivSqrtRecF64_mulAddZ31.scala 564:73]
      node _T_442 = bits(hiSqrR0_A_sqrt, 8, 0) @[DivSqrtRecF64_mulAddZ31.scala 566:44]
      node _T_443 = mux(cyc_A4_sqrt, _T_442, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 566:16]
      node _T_444 = or(_T_441, _T_443) @[DivSqrtRecF64_mulAddZ31.scala 565:73]
      node _T_445 = bits(fractR0_A, 8, 1) @[DivSqrtRecF64_mulAddZ31.scala 567:55]
      node _T_446 = cat(UInt<1>("h01"), _T_445) @[Cat.scala 29:58]
      node _T_447 = mux(cyc_A2, _T_446, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 567:16]
      node _T_448 = or(_T_444, _T_447) @[DivSqrtRecF64_mulAddZ31.scala 566:73]
      nextMulAdd9B_A <= _T_448 @[DivSqrtRecF64_mulAddZ31.scala 561:24]
      skip @[DivSqrtRecF64_mulAddZ31.scala 560:74]
    when cyc_A1_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 569:24]
      ER1_B_sqrt <= ER1_A1_sqrt @[DivSqrtRecF64_mulAddZ31.scala 570:20]
      skip @[DivSqrtRecF64_mulAddZ31.scala 569:24]
    node _T_449 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 576:16]
    node _T_450 = or(_T_449, cyc_B6_div) @[DivSqrtRecF64_mulAddZ31.scala 576:31]
    node _T_451 = or(_T_450, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 576:45]
    node _T_452 = or(_T_451, cyc_B3) @[DivSqrtRecF64_mulAddZ31.scala 576:55]
    node _T_453 = or(_T_452, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 576:65]
    node _T_454 = or(_T_453, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 577:25]
    node _T_455 = or(_T_454, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 577:35]
    io.latchMulAddA_0 <= _T_455 @[DivSqrtRecF64_mulAddZ31.scala 575:23]
    node _T_456 = shl(ER1_A1_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 579:51]
    node _T_457 = mux(cyc_A1_sqrt, _T_456, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 579:12]
    node _T_458 = or(cyc_B7_sqrt, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 580:25]
    node _T_459 = mux(_T_458, sigB_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 580:12]
    node _T_460 = or(_T_457, _T_459) @[DivSqrtRecF64_mulAddZ31.scala 579:67]
    node _T_461 = mux(cyc_B6_div, sigA_PA, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 581:12]
    node _T_462 = or(_T_460, _T_461) @[DivSqrtRecF64_mulAddZ31.scala 580:67]
    node _T_463 = bits(zSigma1_B4, 45, 12) @[DivSqrtRecF64_mulAddZ31.scala 582:19]
    node _T_464 = or(_T_462, _T_463) @[DivSqrtRecF64_mulAddZ31.scala 581:67]
    node _T_465 = or(cyc_B3, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 584:20]
    node _T_466 = bits(sigXNU_B3_CX, 57, 12) @[DivSqrtRecF64_mulAddZ31.scala 584:48]
    node _T_467 = mux(_T_465, _T_466, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 584:12]
    node _T_468 = or(_T_464, _T_467) @[DivSqrtRecF64_mulAddZ31.scala 582:67]
    node _T_469 = bits(sigXN_C, 57, 25) @[DivSqrtRecF64_mulAddZ31.scala 585:43]
    node _T_470 = shl(_T_469, 13) @[DivSqrtRecF64_mulAddZ31.scala 585:51]
    node _T_471 = mux(cyc_C4_div, _T_470, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 585:12]
    node _T_472 = or(_T_468, _T_471) @[DivSqrtRecF64_mulAddZ31.scala 584:67]
    node _T_473 = shl(u_C_sqrt, 15) @[DivSqrtRecF64_mulAddZ31.scala 586:44]
    node _T_474 = mux(cyc_C4_sqrt, _T_473, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 586:12]
    node _T_475 = or(_T_472, _T_474) @[DivSqrtRecF64_mulAddZ31.scala 585:67]
    node _T_476 = mux(cyc_C1_div, sigB_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 587:12]
    node _T_477 = or(_T_475, _T_476) @[DivSqrtRecF64_mulAddZ31.scala 586:67]
    node _T_478 = or(_T_477, zComplSigT_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 587:67]
    io.mulAddA_0 <= _T_478 @[DivSqrtRecF64_mulAddZ31.scala 578:18]
    node _T_479 = or(cyc_A1, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 590:16]
    node _T_480 = or(_T_479, cyc_B6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 590:31]
    node _T_481 = or(_T_480, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 590:46]
    node _T_482 = or(_T_481, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 590:56]
    node _T_483 = or(_T_482, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 591:25]
    node _T_484 = or(_T_483, cyc_C1) @[DivSqrtRecF64_mulAddZ31.scala 591:35]
    io.latchMulAddB_0 <= _T_484 @[DivSqrtRecF64_mulAddZ31.scala 589:23]
    node _T_485 = shl(r1_A1, 36) @[DivSqrtRecF64_mulAddZ31.scala 593:31]
    node _T_486 = mux(cyc_A1, _T_485, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 593:12]
    node _T_487 = shl(ESqrR1_B_sqrt, 19) @[DivSqrtRecF64_mulAddZ31.scala 594:39]
    node _T_488 = mux(cyc_B7_sqrt, _T_487, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 594:12]
    node _T_489 = or(_T_486, _T_488) @[DivSqrtRecF64_mulAddZ31.scala 593:55]
    node _T_490 = shl(ER1_B_sqrt, 36) @[DivSqrtRecF64_mulAddZ31.scala 595:36]
    node _T_491 = mux(cyc_B6_sqrt, _T_490, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 595:12]
    node _T_492 = or(_T_489, _T_491) @[DivSqrtRecF64_mulAddZ31.scala 594:55]
    node _T_493 = or(_T_492, zSigma1_B4) @[DivSqrtRecF64_mulAddZ31.scala 595:55]
    node _T_494 = bits(sqrSigma1_C, 30, 1) @[DivSqrtRecF64_mulAddZ31.scala 597:37]
    node _T_495 = mux(cyc_C6_sqrt, _T_494, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 597:12]
    node _T_496 = or(_T_493, _T_495) @[DivSqrtRecF64_mulAddZ31.scala 596:55]
    node _T_497 = mux(cyc_C4, sqrSigma1_C, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 598:12]
    node _T_498 = or(_T_496, _T_497) @[DivSqrtRecF64_mulAddZ31.scala 597:55]
    node _T_499 = or(_T_498, zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 598:55]
    io.mulAddB_0 <= _T_499 @[DivSqrtRecF64_mulAddZ31.scala 592:18]
    node _T_500 = or(cyc_A4, cyc_A3_div) @[DivSqrtRecF64_mulAddZ31.scala 602:20]
    node _T_501 = or(_T_500, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 602:34]
    node _T_502 = or(_T_501, cyc_B10_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 602:48]
    node _T_503 = or(_T_502, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 603:30]
    node _T_504 = or(_T_503, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 603:45]
    node _T_505 = or(_T_504, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 603:60]
    node _T_506 = or(_T_505, cyc_B5_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 603:70]
    node _T_507 = or(_T_506, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 604:29]
    node _T_508 = or(_T_507, cyc_B2_div) @[DivSqrtRecF64_mulAddZ31.scala 604:44]
    node _T_509 = or(_T_508, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 604:58]
    node _T_510 = or(_T_509, cyc_C4) @[DivSqrtRecF64_mulAddZ31.scala 604:73]
    node _T_511 = or(cyc_A3, cyc_A2_div) @[DivSqrtRecF64_mulAddZ31.scala 606:20]
    node _T_512 = or(_T_511, cyc_B9_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 606:34]
    node _T_513 = or(_T_512, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 607:29]
    node _T_514 = or(_T_513, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 607:44]
    node _T_515 = or(_T_514, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 607:54]
    node _T_516 = or(_T_515, cyc_B4_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 607:64]
    node _T_517 = or(_T_516, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 608:29]
    node _T_518 = or(_T_517, cyc_B1_div) @[DivSqrtRecF64_mulAddZ31.scala 608:44]
    node _T_519 = or(_T_518, cyc_C6_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 608:58]
    node _T_520 = or(_T_519, cyc_C3) @[DivSqrtRecF64_mulAddZ31.scala 608:73]
    node _T_521 = or(cyc_A2, cyc_A1_div) @[DivSqrtRecF64_mulAddZ31.scala 610:20]
    node _T_522 = or(_T_521, cyc_B8_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 610:34]
    node _T_523 = or(_T_522, cyc_B7_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 611:29]
    node _T_524 = or(_T_523, cyc_B5) @[DivSqrtRecF64_mulAddZ31.scala 611:44]
    node _T_525 = or(_T_524, cyc_B4) @[DivSqrtRecF64_mulAddZ31.scala 611:54]
    node _T_526 = or(_T_525, cyc_B3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 611:64]
    node _T_527 = or(_T_526, cyc_B1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 612:29]
    node _T_528 = or(_T_527, cyc_C5) @[DivSqrtRecF64_mulAddZ31.scala 612:44]
    node _T_529 = or(_T_528, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 612:54]
    node _T_530 = or(io.latchMulAddA_0, cyc_B6) @[DivSqrtRecF64_mulAddZ31.scala 614:31]
    node _T_531 = or(_T_530, cyc_B2_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 614:41]
    node _T_532 = cat(_T_529, _T_531) @[Cat.scala 29:58]
    node _T_533 = cat(_T_510, _T_520) @[Cat.scala 29:58]
    node _T_534 = cat(_T_533, _T_532) @[Cat.scala 29:58]
    io.usingMulAdd <= _T_534 @[DivSqrtRecF64_mulAddZ31.scala 601:20]
    node _T_535 = shl(sigX1_B, 47) @[DivSqrtRecF64_mulAddZ31.scala 618:45]
    node _T_536 = mux(cyc_B1, _T_535, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 618:12]
    node _T_537 = shl(sigX1_B, 46) @[DivSqrtRecF64_mulAddZ31.scala 619:45]
    node _T_538 = mux(cyc_C6_sqrt, _T_537, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 619:12]
    node _T_539 = or(_T_536, _T_538) @[DivSqrtRecF64_mulAddZ31.scala 618:66]
    node _T_540 = or(cyc_C4_sqrt, cyc_C2) @[DivSqrtRecF64_mulAddZ31.scala 620:25]
    node _T_541 = shl(sigXN_C, 47) @[DivSqrtRecF64_mulAddZ31.scala 620:45]
    node _T_542 = mux(_T_540, _T_541, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 620:12]
    node _T_543 = or(_T_539, _T_542) @[DivSqrtRecF64_mulAddZ31.scala 619:66]
    node _T_544 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 621:27]
    node _T_545 = and(cyc_E3_div, _T_544) @[DivSqrtRecF64_mulAddZ31.scala 621:24]
    node _T_546 = shl(bit0FractA_PC, 53) @[DivSqrtRecF64_mulAddZ31.scala 621:51]
    node _T_547 = mux(_T_545, _T_546, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 621:12]
    node _T_548 = or(_T_543, _T_547) @[DivSqrtRecF64_mulAddZ31.scala 620:66]
    node _T_549 = bits(sExp_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 623:25]
    node _T_550 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 624:25]
    node _T_551 = shl(_T_550, 1) @[DivSqrtRecF64_mulAddZ31.scala 624:28]
    node _T_552 = bits(sigB_PC, 1, 1) @[DivSqrtRecF64_mulAddZ31.scala 625:29]
    node _T_553 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 625:42]
    node _T_554 = xor(_T_552, _T_553) @[DivSqrtRecF64_mulAddZ31.scala 625:33]
    node _T_555 = bits(sigB_PC, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 625:54]
    node _T_556 = cat(_T_554, _T_555) @[Cat.scala 29:58]
    node _T_557 = mux(_T_549, _T_551, _T_556) @[DivSqrtRecF64_mulAddZ31.scala 623:17]
    node _T_558 = bits(sigT_E, 0, 0) @[DivSqrtRecF64_mulAddZ31.scala 626:28]
    node _T_559 = not(_T_558) @[DivSqrtRecF64_mulAddZ31.scala 626:20]
    node _T_560 = shl(_T_559, 1) @[DivSqrtRecF64_mulAddZ31.scala 626:32]
    node _T_561 = xor(_T_557, _T_560) @[DivSqrtRecF64_mulAddZ31.scala 626:16]
    node _T_562 = shl(_T_561, 54) @[DivSqrtRecF64_mulAddZ31.scala 627:14]
    node _T_563 = mux(cyc_E3_sqrt, _T_562, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 622:12]
    node _T_564 = or(_T_548, _T_563) @[DivSqrtRecF64_mulAddZ31.scala 621:66]
    io.mulAddC_2 <= _T_564 @[DivSqrtRecF64_mulAddZ31.scala 617:18]
    node ESqrR1_B8_sqrt = bits(io.mulAddResult_3, 103, 72) @[DivSqrtRecF64_mulAddZ31.scala 631:43]
    node _T_565 = bits(io.mulAddResult_3, 90, 45) @[DivSqrtRecF64_mulAddZ31.scala 632:49]
    node _T_566 = not(_T_565) @[DivSqrtRecF64_mulAddZ31.scala 632:31]
    node _T_567 = mux(cyc_B4, _T_566, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 632:22]
    zSigma1_B4 <= _T_567 @[DivSqrtRecF64_mulAddZ31.scala 632:16]
    node sqrSigma1_B1 = bits(io.mulAddResult_3, 79, 47) @[DivSqrtRecF64_mulAddZ31.scala 633:41]
    node _T_568 = bits(io.mulAddResult_3, 104, 47) @[DivSqrtRecF64_mulAddZ31.scala 634:38]
    sigXNU_B3_CX <= _T_568 @[DivSqrtRecF64_mulAddZ31.scala 634:18]
    node _T_569 = bits(io.mulAddResult_3, 104, 104) @[DivSqrtRecF64_mulAddZ31.scala 635:39]
    node E_C1_div = eq(_T_569, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 635:20]
    node _T_570 = eq(E_C1_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 637:28]
    node _T_571 = and(cyc_C1_div, _T_570) @[DivSqrtRecF64_mulAddZ31.scala 637:25]
    node _T_572 = or(_T_571, cyc_C1_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 637:40]
    node _T_573 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 638:31]
    node _T_574 = not(_T_573) @[DivSqrtRecF64_mulAddZ31.scala 638:13]
    node _T_575 = mux(_T_572, _T_574, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 637:12]
    node _T_576 = and(cyc_C1_div, E_C1_div) @[DivSqrtRecF64_mulAddZ31.scala 641:24]
    node _T_577 = bits(io.mulAddResult_3, 102, 50) @[DivSqrtRecF64_mulAddZ31.scala 641:55]
    node _T_578 = not(_T_577) @[DivSqrtRecF64_mulAddZ31.scala 641:37]
    node _T_579 = mux(_T_576, _T_578, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 641:12]
    node _T_580 = or(_T_575, _T_579) @[DivSqrtRecF64_mulAddZ31.scala 640:11]
    zComplSigT_C1 <= _T_580 @[DivSqrtRecF64_mulAddZ31.scala 636:19]
    node _T_581 = bits(io.mulAddResult_3, 104, 51) @[DivSqrtRecF64_mulAddZ31.scala 643:44]
    node _T_582 = not(_T_581) @[DivSqrtRecF64_mulAddZ31.scala 643:26]
    node _T_583 = mux(cyc_C1_sqrt, _T_582, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 643:12]
    zComplSigT_C1_sqrt <= _T_583 @[DivSqrtRecF64_mulAddZ31.scala 642:24]
    node sigT_C1 = not(zComplSigT_C1) @[DivSqrtRecF64_mulAddZ31.scala 647:19]
    node remT_E2 = bits(io.mulAddResult_3, 55, 0) @[DivSqrtRecF64_mulAddZ31.scala 648:36]
    when cyc_B8_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 650:24]
      ESqrR1_B_sqrt <= ESqrR1_B8_sqrt @[DivSqrtRecF64_mulAddZ31.scala 651:23]
      skip @[DivSqrtRecF64_mulAddZ31.scala 650:24]
    when cyc_B3 : @[DivSqrtRecF64_mulAddZ31.scala 653:19]
      sigX1_B <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 654:17]
      skip @[DivSqrtRecF64_mulAddZ31.scala 653:19]
    when cyc_B1 : @[DivSqrtRecF64_mulAddZ31.scala 656:19]
      sqrSigma1_C <= sqrSigma1_B1 @[DivSqrtRecF64_mulAddZ31.scala 657:21]
      skip @[DivSqrtRecF64_mulAddZ31.scala 656:19]
    node _T_584 = or(cyc_C6_sqrt, cyc_C5_div) @[DivSqrtRecF64_mulAddZ31.scala 660:23]
    node _T_585 = or(_T_584, cyc_C3_sqrt) @[DivSqrtRecF64_mulAddZ31.scala 660:37]
    when _T_585 : @[DivSqrtRecF64_mulAddZ31.scala 660:53]
      sigXN_C <= sigXNU_B3_CX @[DivSqrtRecF64_mulAddZ31.scala 661:17]
      skip @[DivSqrtRecF64_mulAddZ31.scala 660:53]
    when cyc_C5_sqrt : @[DivSqrtRecF64_mulAddZ31.scala 663:24]
      node _T_586 = bits(sigXNU_B3_CX, 56, 26) @[DivSqrtRecF64_mulAddZ31.scala 664:33]
      u_C_sqrt <= _T_586 @[DivSqrtRecF64_mulAddZ31.scala 664:18]
      skip @[DivSqrtRecF64_mulAddZ31.scala 663:24]
    when cyc_C1 : @[DivSqrtRecF64_mulAddZ31.scala 666:19]
      E_E_div <= E_C1_div @[DivSqrtRecF64_mulAddZ31.scala 667:17]
      sigT_E <= sigT_C1 @[DivSqrtRecF64_mulAddZ31.scala 668:17]
      skip @[DivSqrtRecF64_mulAddZ31.scala 666:19]
    when cyc_E2 : @[DivSqrtRecF64_mulAddZ31.scala 671:19]
      node _T_587 = bits(remT_E2, 55, 55) @[DivSqrtRecF64_mulAddZ31.scala 672:47]
      node _T_588 = bits(remT_E2, 53, 53) @[DivSqrtRecF64_mulAddZ31.scala 672:61]
      node _T_589 = mux(sqrtOp_PC, _T_587, _T_588) @[DivSqrtRecF64_mulAddZ31.scala 672:27]
      isNegRemT_E <= _T_589 @[DivSqrtRecF64_mulAddZ31.scala 672:21]
      node _T_590 = bits(remT_E2, 53, 0) @[DivSqrtRecF64_mulAddZ31.scala 674:21]
      node _T_591 = eq(_T_590, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 674:29]
      node _T_592 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 675:18]
      node _T_593 = bits(remT_E2, 55, 54) @[DivSqrtRecF64_mulAddZ31.scala 675:41]
      node _T_594 = eq(_T_593, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 675:50]
      node _T_595 = or(_T_592, _T_594) @[DivSqrtRecF64_mulAddZ31.scala 675:30]
      node _T_596 = and(_T_591, _T_595) @[DivSqrtRecF64_mulAddZ31.scala 674:42]
      isZeroRemT_E <= _T_596 @[DivSqrtRecF64_mulAddZ31.scala 673:22]
      skip @[DivSqrtRecF64_mulAddZ31.scala 671:19]
    node _T_597 = eq(isNegRemT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 685:24]
    node _T_598 = eq(isZeroRemT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 685:41]
    node _T_599 = and(_T_597, _T_598) @[DivSqrtRecF64_mulAddZ31.scala 685:38]
    node trueLtX_E1 = mux(sqrtOp_PC, _T_599, isNegRemT_E) @[DivSqrtRecF64_mulAddZ31.scala 685:12]
    node _T_600 = add(sExp_PC, asSInt(UInt<2>("h01"))) @[DivSqrtRecF64_mulAddZ31.scala 693:29]
    node _T_601 = tail(_T_600, 1) @[DivSqrtRecF64_mulAddZ31.scala 693:29]
    node sExpP1_PC = asSInt(_T_601) @[DivSqrtRecF64_mulAddZ31.scala 693:29]
    node sigTP1_E = add(sigT_E, UInt<1>("h01")) @[DivSqrtRecF64_mulAddZ31.scala 694:27]
    node _T_602 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 698:42]
    node _T_603 = and(leaving_PC, _T_602) @[DivSqrtRecF64_mulAddZ31.scala 698:39]
    io.rawOutValid_div <= _T_603 @[DivSqrtRecF64_mulAddZ31.scala 698:25]
    node _T_604 = and(leaving_PC, sqrtOp_PC) @[DivSqrtRecF64_mulAddZ31.scala 699:39]
    io.rawOutValid_sqrt <= _T_604 @[DivSqrtRecF64_mulAddZ31.scala 699:25]
    io.roundingModeOut <= roundingMode_PC @[DivSqrtRecF64_mulAddZ31.scala 700:25]
    node _T_605 = and(majorExc_PC, isNaN_PC) @[DivSqrtRecF64_mulAddZ31.scala 701:40]
    io.invalidExc <= _T_605 @[DivSqrtRecF64_mulAddZ31.scala 701:25]
    node _T_606 = eq(isNaN_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 702:43]
    node _T_607 = and(majorExc_PC, _T_606) @[DivSqrtRecF64_mulAddZ31.scala 702:40]
    io.infiniteExc <= _T_607 @[DivSqrtRecF64_mulAddZ31.scala 702:25]
    io.rawOut.isNaN <= isNaN_PC @[DivSqrtRecF64_mulAddZ31.scala 703:22]
    io.rawOut.isInf <= isInf_PC @[DivSqrtRecF64_mulAddZ31.scala 704:22]
    io.rawOut.isZero <= isZero_PC @[DivSqrtRecF64_mulAddZ31.scala 705:22]
    io.rawOut.sign <= sign_PC @[DivSqrtRecF64_mulAddZ31.scala 706:20]
    node _T_608 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 708:13]
    node _T_609 = and(_T_608, E_E_div) @[DivSqrtRecF64_mulAddZ31.scala 708:25]
    node _T_610 = mux(_T_609, sExp_PC, asSInt(UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 708:12]
    node _T_611 = eq(sqrtOp_PC, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 709:13]
    node _T_612 = eq(E_E_div, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 709:28]
    node _T_613 = and(_T_611, _T_612) @[DivSqrtRecF64_mulAddZ31.scala 709:25]
    node _T_614 = mux(_T_613, sExpP1_PC, asSInt(UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 709:12]
    node _T_615 = or(_T_610, _T_614) @[DivSqrtRecF64_mulAddZ31.scala 708:76]
    node _T_616 = asSInt(_T_615) @[DivSqrtRecF64_mulAddZ31.scala 708:76]
    node _T_617 = shr(sExp_PC, 1) @[DivSqrtRecF64_mulAddZ31.scala 710:47]
    node _T_618 = add(_T_617, asSInt(UInt<12>("h0400"))) @[DivSqrtRecF64_mulAddZ31.scala 710:52]
    node _T_619 = mux(sqrtOp_PC, _T_618, asSInt(UInt<1>("h00"))) @[DivSqrtRecF64_mulAddZ31.scala 710:12]
    node _T_620 = or(_T_616, _T_619) @[DivSqrtRecF64_mulAddZ31.scala 709:76]
    node _T_621 = asSInt(_T_620) @[DivSqrtRecF64_mulAddZ31.scala 709:76]
    io.rawOut.sExp <= _T_621 @[DivSqrtRecF64_mulAddZ31.scala 707:20]
    node _T_622 = mux(trueLtX_E1, sigT_E, sigTP1_E) @[DivSqrtRecF64_mulAddZ31.scala 711:29]
    node _T_623 = eq(isZeroRemT_E, UInt<1>("h00")) @[DivSqrtRecF64_mulAddZ31.scala 711:61]
    node _T_624 = cat(_T_622, _T_623) @[Cat.scala 29:58]
    io.rawOut.sig <= _T_624 @[DivSqrtRecF64_mulAddZ31.scala 711:19]
    
