circuit BranchMaskGenerationLogic :
  module BranchMaskGenerationLogic : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip is_branch : UInt<1>[1], flip will_fire : UInt<1>[1], br_tag : UInt<3>[1], br_mask : UInt<8>[1], is_full : UInt<1>[1], flip brupdate : {b1 : {resolve_mask : UInt<8>, mispredict_mask : UInt<8>}, b2 : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, valid : UInt<1>, mispredict : UInt<1>, taken : UInt<1>, cfi_type : UInt<3>, pc_sel : UInt<2>, jalr_target : UInt<40>, target_offset : SInt<1>}}, flip flush_pipeline : UInt<1>, debug_branch_mask : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg branch_mask : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[decode.scala 741:28]
    wire tag_masks : UInt<8>[1] @[decode.scala 747:23]
    node _T = not(UInt<8>("h00")) @[decode.scala 751:41]
    node _T_1 = eq(branch_mask, _T) @[decode.scala 751:37]
    node _T_2 = and(_T_1, io.is_branch[0]) @[decode.scala 751:63]
    io.is_full[0] <= _T_2 @[decode.scala 751:19]
    wire _T_3 : UInt<3> @[decode.scala 754:26]
    _T_3 <= UInt<1>("h00") @[decode.scala 755:16]
    tag_masks[0] <= UInt<1>("h00") @[decode.scala 756:18]
    node _T_4 = bits(branch_mask, 7, 7) @[decode.scala 759:27]
    node _T_5 = not(_T_4) @[decode.scala 759:13]
    when _T_5 : @[decode.scala 759:32]
      _T_3 <= UInt<3>("h07") @[decode.scala 760:20]
      node _T_6 = dshl(UInt<1>("h01"), UInt<3>("h07")) @[decode.scala 761:30]
      tag_masks[0] <= _T_6 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_7 = bits(branch_mask, 6, 6) @[decode.scala 759:27]
    node _T_8 = not(_T_7) @[decode.scala 759:13]
    when _T_8 : @[decode.scala 759:32]
      _T_3 <= UInt<3>("h06") @[decode.scala 760:20]
      node _T_9 = dshl(UInt<1>("h01"), UInt<3>("h06")) @[decode.scala 761:30]
      tag_masks[0] <= _T_9 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_10 = bits(branch_mask, 5, 5) @[decode.scala 759:27]
    node _T_11 = not(_T_10) @[decode.scala 759:13]
    when _T_11 : @[decode.scala 759:32]
      _T_3 <= UInt<3>("h05") @[decode.scala 760:20]
      node _T_12 = dshl(UInt<1>("h01"), UInt<3>("h05")) @[decode.scala 761:30]
      tag_masks[0] <= _T_12 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_13 = bits(branch_mask, 4, 4) @[decode.scala 759:27]
    node _T_14 = not(_T_13) @[decode.scala 759:13]
    when _T_14 : @[decode.scala 759:32]
      _T_3 <= UInt<3>("h04") @[decode.scala 760:20]
      node _T_15 = dshl(UInt<1>("h01"), UInt<3>("h04")) @[decode.scala 761:30]
      tag_masks[0] <= _T_15 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_16 = bits(branch_mask, 3, 3) @[decode.scala 759:27]
    node _T_17 = not(_T_16) @[decode.scala 759:13]
    when _T_17 : @[decode.scala 759:32]
      _T_3 <= UInt<2>("h03") @[decode.scala 760:20]
      node _T_18 = dshl(UInt<1>("h01"), UInt<2>("h03")) @[decode.scala 761:30]
      tag_masks[0] <= _T_18 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_19 = bits(branch_mask, 2, 2) @[decode.scala 759:27]
    node _T_20 = not(_T_19) @[decode.scala 759:13]
    when _T_20 : @[decode.scala 759:32]
      _T_3 <= UInt<2>("h02") @[decode.scala 760:20]
      node _T_21 = dshl(UInt<1>("h01"), UInt<2>("h02")) @[decode.scala 761:30]
      tag_masks[0] <= _T_21 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_22 = bits(branch_mask, 1, 1) @[decode.scala 759:27]
    node _T_23 = not(_T_22) @[decode.scala 759:13]
    when _T_23 : @[decode.scala 759:32]
      _T_3 <= UInt<1>("h01") @[decode.scala 760:20]
      node _T_24 = dshl(UInt<1>("h01"), UInt<1>("h01")) @[decode.scala 761:30]
      tag_masks[0] <= _T_24 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    node _T_25 = bits(branch_mask, 0, 0) @[decode.scala 759:27]
    node _T_26 = not(_T_25) @[decode.scala 759:13]
    when _T_26 : @[decode.scala 759:32]
      _T_3 <= UInt<1>("h00") @[decode.scala 760:20]
      node _T_27 = dshl(UInt<1>("h01"), UInt<1>("h00")) @[decode.scala 761:30]
      tag_masks[0] <= _T_27 @[decode.scala 761:22]
      skip @[decode.scala 759:32]
    io.br_tag[0] <= _T_3 @[decode.scala 765:18]
    node _T_28 = or(tag_masks[0], branch_mask) @[decode.scala 766:55]
    node allocate_mask = mux(io.is_branch[0], _T_28, branch_mask) @[decode.scala 766:24]
    node _T_29 = not(io.brupdate.b1.resolve_mask) @[util.scala 89:23]
    node _T_30 = and(branch_mask, _T_29) @[util.scala 89:21]
    io.br_mask[0] <= _T_30 @[decode.scala 775:19]
    node _T_31 = or(tag_masks[0], branch_mask) @[decode.scala 776:51]
    node curr_mask = mux(io.will_fire[0], _T_31, branch_mask) @[decode.scala 776:20]
    when io.flush_pipeline : @[decode.scala 782:28]
      branch_mask <= UInt<1>("h00") @[decode.scala 783:17]
      skip @[decode.scala 782:28]
    else : @[decode.scala 784:16]
      node _T_32 = not(UInt<8>("h00")) @[decode.scala 787:7]
      node _T_33 = mux(io.brupdate.b2.mispredict, io.brupdate.b2.uop.br_mask, _T_32) @[decode.scala 785:19]
      node _T_34 = not(io.brupdate.b1.resolve_mask) @[util.scala 89:23]
      node _T_35 = and(curr_mask, _T_34) @[util.scala 89:21]
      node _T_36 = and(_T_35, _T_33) @[decode.scala 788:57]
      branch_mask <= _T_36 @[decode.scala 788:17]
      skip @[decode.scala 784:16]
    io.debug_branch_mask <= branch_mask @[decode.scala 791:24]
    
