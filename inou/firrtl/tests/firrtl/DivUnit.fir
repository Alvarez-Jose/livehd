circuit DivUnit :
  module MulDiv : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}}, flip kill : UInt<1>, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, tag : UInt<5>}}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Multiplier.scala 52:22]
    reg req : {fn : UInt<4>, dw : UInt<1>, in1 : UInt<64>, in2 : UInt<64>, tag : UInt<5>}, clock @[Multiplier.scala 54:16]
    reg count : UInt<7>, clock @[Multiplier.scala 55:18]
    reg neg_out : UInt<1>, clock @[Multiplier.scala 58:20]
    reg isHi : UInt<1>, clock @[Multiplier.scala 59:17]
    reg resHi : UInt<1>, clock @[Multiplier.scala 60:18]
    reg divisor : UInt<65>, clock @[Multiplier.scala 61:20]
    reg remainder : UInt<130>, clock @[Multiplier.scala 62:22]
    node _T = and(io.req.bits.fn, UInt<3>("h04")) @[Decode.scala 14:65]
    node _T_1 = eq(_T, UInt<3>("h00")) @[Decode.scala 14:121]
    node _T_2 = or(UInt<1>("h00"), _T_1) @[Decode.scala 15:30]
    node _T_3 = and(io.req.bits.fn, UInt<3>("h05")) @[Decode.scala 14:65]
    node _T_4 = eq(_T_3, UInt<3>("h01")) @[Decode.scala 14:121]
    node _T_5 = and(io.req.bits.fn, UInt<3>("h02")) @[Decode.scala 14:65]
    node _T_6 = eq(_T_5, UInt<3>("h02")) @[Decode.scala 14:121]
    node _T_7 = or(UInt<1>("h00"), _T_4) @[Decode.scala 15:30]
    node _T_8 = or(_T_7, _T_6) @[Decode.scala 15:30]
    node _T_9 = and(io.req.bits.fn, UInt<3>("h06")) @[Decode.scala 14:65]
    node _T_10 = eq(_T_9, UInt<3>("h00")) @[Decode.scala 14:121]
    node _T_11 = and(io.req.bits.fn, UInt<3>("h01")) @[Decode.scala 14:65]
    node _T_12 = eq(_T_11, UInt<3>("h00")) @[Decode.scala 14:121]
    node _T_13 = or(UInt<1>("h00"), _T_10) @[Decode.scala 15:30]
    node _T_14 = or(_T_13, _T_12) @[Decode.scala 15:30]
    node _T_15 = and(io.req.bits.fn, UInt<3>("h05")) @[Decode.scala 14:65]
    node _T_16 = eq(_T_15, UInt<3>("h04")) @[Decode.scala 14:121]
    node _T_17 = or(UInt<1>("h00"), _T_10) @[Decode.scala 15:30]
    node _T_18 = or(_T_17, _T_16) @[Decode.scala 15:30]
    node cmdMul = bits(_T_2, 0, 0) @[Multiplier.scala 76:107]
    node cmdHi = bits(_T_8, 0, 0) @[Multiplier.scala 76:107]
    node lhsSigned = bits(_T_14, 0, 0) @[Multiplier.scala 76:107]
    node rhsSigned = bits(_T_18, 0, 0) @[Multiplier.scala 76:107]
    node _T_19 = eq(io.req.bits.dw, UInt<1>("h00")) @[Multiplier.scala 79:60]
    node _T_20 = and(UInt<1>("h01"), _T_19) @[Multiplier.scala 79:50]
    node _T_21 = bits(io.req.bits.in1, 31, 31) @[Multiplier.scala 82:38]
    node _T_22 = bits(io.req.bits.in1, 63, 63) @[Multiplier.scala 82:48]
    node _T_23 = mux(_T_20, _T_21, _T_22) @[Multiplier.scala 82:29]
    node lhs_sign = and(lhsSigned, _T_23) @[Multiplier.scala 82:23]
    node _T_24 = bits(lhs_sign, 0, 0) @[Bitwise.scala 72:15]
    node _T_25 = mux(_T_24, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_26 = bits(io.req.bits.in1, 63, 32) @[Multiplier.scala 83:43]
    node _T_27 = mux(_T_20, _T_25, _T_26) @[Multiplier.scala 83:17]
    node _T_28 = bits(io.req.bits.in1, 31, 0) @[Multiplier.scala 84:15]
    node lhs_in = cat(_T_27, _T_28) @[Cat.scala 29:58]
    node _T_29 = eq(io.req.bits.dw, UInt<1>("h00")) @[Multiplier.scala 79:60]
    node _T_30 = and(UInt<1>("h01"), _T_29) @[Multiplier.scala 79:50]
    node _T_31 = bits(io.req.bits.in2, 31, 31) @[Multiplier.scala 82:38]
    node _T_32 = bits(io.req.bits.in2, 63, 63) @[Multiplier.scala 82:48]
    node _T_33 = mux(_T_30, _T_31, _T_32) @[Multiplier.scala 82:29]
    node rhs_sign = and(rhsSigned, _T_33) @[Multiplier.scala 82:23]
    node _T_34 = bits(rhs_sign, 0, 0) @[Bitwise.scala 72:15]
    node _T_35 = mux(_T_34, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_36 = bits(io.req.bits.in2, 63, 32) @[Multiplier.scala 83:43]
    node _T_37 = mux(_T_30, _T_35, _T_36) @[Multiplier.scala 83:17]
    node _T_38 = bits(io.req.bits.in2, 31, 0) @[Multiplier.scala 84:15]
    node rhs_in = cat(_T_37, _T_38) @[Cat.scala 29:58]
    node _T_39 = bits(remainder, 128, 64) @[Multiplier.scala 89:29]
    node _T_40 = sub(_T_39, divisor) @[Multiplier.scala 89:37]
    node subtractor = tail(_T_40, 1) @[Multiplier.scala 89:37]
    node _T_41 = bits(remainder, 128, 65) @[Multiplier.scala 90:36]
    node _T_42 = bits(remainder, 63, 0) @[Multiplier.scala 90:57]
    node result = mux(resHi, _T_41, _T_42) @[Multiplier.scala 90:19]
    node _T_43 = sub(UInt<1>("h00"), result) @[Multiplier.scala 91:27]
    node negated_remainder = tail(_T_43, 1) @[Multiplier.scala 91:27]
    node _T_44 = eq(state, UInt<3>("h01")) @[Multiplier.scala 93:39]
    when _T_44 : @[Multiplier.scala 93:57]
      node _T_45 = bits(remainder, 63, 63) @[Multiplier.scala 94:20]
      when _T_45 : @[Multiplier.scala 94:27]
        remainder <= negated_remainder @[Multiplier.scala 95:17]
        skip @[Multiplier.scala 94:27]
      node _T_46 = bits(divisor, 63, 63) @[Multiplier.scala 97:18]
      when _T_46 : @[Multiplier.scala 97:25]
        divisor <= subtractor @[Multiplier.scala 98:15]
        skip @[Multiplier.scala 97:25]
      state <= UInt<3>("h03") @[Multiplier.scala 100:11]
      skip @[Multiplier.scala 93:57]
    node _T_47 = eq(state, UInt<3>("h05")) @[Multiplier.scala 102:39]
    when _T_47 : @[Multiplier.scala 102:57]
      remainder <= negated_remainder @[Multiplier.scala 103:15]
      state <= UInt<3>("h07") @[Multiplier.scala 104:11]
      resHi <= UInt<1>("h00") @[Multiplier.scala 105:11]
      skip @[Multiplier.scala 102:57]
    node _T_48 = eq(state, UInt<3>("h02")) @[Multiplier.scala 107:39]
    when _T_48 : @[Multiplier.scala 107:50]
      node _T_49 = bits(remainder, 129, 65) @[Multiplier.scala 108:31]
      node _T_50 = bits(remainder, 63, 0) @[Multiplier.scala 108:55]
      node _T_51 = cat(_T_49, _T_50) @[Cat.scala 29:58]
      node _T_52 = bits(remainder, 64, 64) @[Multiplier.scala 109:31]
      node _T_53 = bits(_T_51, 63, 0) @[Multiplier.scala 110:24]
      node _T_54 = bits(_T_51, 128, 64) @[Multiplier.scala 111:23]
      node _T_55 = asSInt(_T_54) @[Multiplier.scala 111:37]
      node _T_56 = asSInt(divisor) @[Multiplier.scala 112:26]
      node _T_57 = bits(_T_53, 0, 0) @[Multiplier.scala 113:38]
      node _T_58 = cat(_T_52, _T_57) @[Cat.scala 29:58]
      node _T_59 = asSInt(_T_58) @[Multiplier.scala 113:60]
      node _T_60 = mul(_T_59, _T_56) @[Multiplier.scala 113:67]
      node _T_61 = add(_T_60, _T_55) @[Multiplier.scala 113:76]
      node _T_62 = tail(_T_61, 1) @[Multiplier.scala 113:76]
      node _T_63 = asSInt(_T_62) @[Multiplier.scala 113:76]
      node _T_64 = bits(_T_53, 63, 1) @[Multiplier.scala 114:38]
      node _T_65 = asUInt(_T_63) @[Cat.scala 29:58]
      node _T_66 = cat(_T_65, _T_64) @[Cat.scala 29:58]
      node _T_67 = eq(count, UInt<6>("h03e")) @[Multiplier.scala 115:32]
      node _T_68 = and(_T_67, neg_out) @[Multiplier.scala 115:57]
      node _T_69 = mul(count, UInt<1>("h01")) @[Multiplier.scala 117:54]
      node _T_70 = bits(_T_69, 5, 0) @[Multiplier.scala 117:70]
      node _T_71 = dshr(asSInt(UInt<65>("h010000000000000000")), _T_70) @[Multiplier.scala 117:44]
      node _T_72 = bits(_T_71, 63, 0) @[Multiplier.scala 117:89]
      node _T_73 = neq(count, UInt<6>("h03f")) @[Multiplier.scala 118:45]
      node _T_74 = and(UInt<1>("h00"), _T_73) @[Multiplier.scala 118:36]
      node _T_75 = neq(count, UInt<1>("h00")) @[Multiplier.scala 118:79]
      node _T_76 = and(_T_74, _T_75) @[Multiplier.scala 118:70]
      node _T_77 = eq(isHi, UInt<1>("h00")) @[Multiplier.scala 119:7]
      node _T_78 = and(_T_76, _T_77) @[Multiplier.scala 118:85]
      node _T_79 = not(_T_72) @[Multiplier.scala 119:26]
      node _T_80 = and(_T_53, _T_79) @[Multiplier.scala 119:24]
      node _T_81 = eq(_T_80, UInt<1>("h00")) @[Multiplier.scala 119:37]
      node _T_82 = and(_T_78, _T_81) @[Multiplier.scala 119:13]
      node _T_83 = mul(count, UInt<1>("h01")) @[Multiplier.scala 120:44]
      node _T_84 = sub(UInt<7>("h040"), _T_83) @[Multiplier.scala 120:36]
      node _T_85 = tail(_T_84, 1) @[Multiplier.scala 120:36]
      node _T_86 = bits(_T_85, 5, 0) @[Multiplier.scala 120:60]
      node _T_87 = dshr(_T_51, _T_86) @[Multiplier.scala 120:27]
      node _T_88 = bits(_T_66, 128, 64) @[Multiplier.scala 121:37]
      node _T_89 = mux(_T_82, _T_87, _T_66) @[Multiplier.scala 121:55]
      node _T_90 = bits(_T_89, 63, 0) @[Multiplier.scala 121:82]
      node _T_91 = cat(_T_88, _T_90) @[Cat.scala 29:58]
      node _T_92 = shr(_T_91, 64) @[Multiplier.scala 122:34]
      node _T_93 = bits(_T_91, 63, 0) @[Multiplier.scala 122:67]
      node _T_94 = cat(_T_92, _T_68) @[Cat.scala 29:58]
      node _T_95 = cat(_T_94, _T_93) @[Cat.scala 29:58]
      remainder <= _T_95 @[Multiplier.scala 122:15]
      node _T_96 = add(count, UInt<1>("h01")) @[Multiplier.scala 124:20]
      node _T_97 = tail(_T_96, 1) @[Multiplier.scala 124:20]
      count <= _T_97 @[Multiplier.scala 124:11]
      node _T_98 = eq(count, UInt<6>("h03f")) @[Multiplier.scala 125:25]
      node _T_99 = or(_T_82, _T_98) @[Multiplier.scala 125:16]
      when _T_99 : @[Multiplier.scala 125:51]
        state <= UInt<3>("h06") @[Multiplier.scala 126:13]
        resHi <= isHi @[Multiplier.scala 127:13]
        skip @[Multiplier.scala 125:51]
      skip @[Multiplier.scala 107:50]
    node _T_100 = eq(state, UInt<3>("h03")) @[Multiplier.scala 130:39]
    when _T_100 : @[Multiplier.scala 130:50]
      node _T_101 = bits(subtractor, 64, 64) @[Multiplier.scala 134:28]
      node _T_102 = bits(remainder, 127, 64) @[Multiplier.scala 135:24]
      node _T_103 = bits(subtractor, 63, 0) @[Multiplier.scala 135:45]
      node _T_104 = mux(_T_101, _T_102, _T_103) @[Multiplier.scala 135:14]
      node _T_105 = bits(remainder, 63, 0) @[Multiplier.scala 135:58]
      node _T_106 = eq(_T_101, UInt<1>("h00")) @[Multiplier.scala 135:67]
      node _T_107 = cat(_T_104, _T_105) @[Cat.scala 29:58]
      node _T_108 = cat(_T_107, _T_106) @[Cat.scala 29:58]
      remainder <= _T_108 @[Multiplier.scala 138:15]
      node _T_109 = eq(count, UInt<7>("h040")) @[Multiplier.scala 139:17]
      when _T_109 : @[Multiplier.scala 139:38]
        node _T_110 = mux(neg_out, UInt<3>("h05"), UInt<3>("h07")) @[Multiplier.scala 140:19]
        state <= _T_110 @[Multiplier.scala 140:13]
        resHi <= isHi @[Multiplier.scala 141:13]
        skip @[Multiplier.scala 139:38]
      node _T_111 = add(count, UInt<1>("h01")) @[Multiplier.scala 145:20]
      node _T_112 = tail(_T_111, 1) @[Multiplier.scala 145:20]
      count <= _T_112 @[Multiplier.scala 145:11]
      node _T_113 = eq(count, UInt<1>("h00")) @[Multiplier.scala 147:24]
      node _T_114 = bits(subtractor, 64, 64) @[Multiplier.scala 147:44]
      node _T_115 = eq(_T_114, UInt<1>("h00")) @[Multiplier.scala 147:33]
      node _T_116 = and(_T_113, _T_115) @[Multiplier.scala 147:30]
      node _T_117 = not(UInt<6>("h00")) @[Multiplier.scala 150:23]
      node _T_118 = bits(divisor, 63, 0) @[Multiplier.scala 151:36]
      node _T_119 = bits(_T_118, 63, 32) @[CircuitMath.scala 35:17]
      node _T_120 = bits(_T_118, 31, 0) @[CircuitMath.scala 36:17]
      node _T_121 = orr(_T_119) @[CircuitMath.scala 37:22]
      node _T_122 = bits(_T_119, 31, 16) @[CircuitMath.scala 35:17]
      node _T_123 = bits(_T_119, 15, 0) @[CircuitMath.scala 36:17]
      node _T_124 = orr(_T_122) @[CircuitMath.scala 37:22]
      node _T_125 = bits(_T_122, 15, 8) @[CircuitMath.scala 35:17]
      node _T_126 = bits(_T_122, 7, 0) @[CircuitMath.scala 36:17]
      node _T_127 = orr(_T_125) @[CircuitMath.scala 37:22]
      node _T_128 = bits(_T_125, 7, 4) @[CircuitMath.scala 35:17]
      node _T_129 = bits(_T_125, 3, 0) @[CircuitMath.scala 36:17]
      node _T_130 = orr(_T_128) @[CircuitMath.scala 37:22]
      node _T_131 = bits(_T_128, 3, 3) @[CircuitMath.scala 32:12]
      node _T_132 = bits(_T_128, 2, 2) @[CircuitMath.scala 32:12]
      node _T_133 = bits(_T_128, 1, 1) @[CircuitMath.scala 30:8]
      node _T_134 = mux(_T_132, UInt<2>("h02"), _T_133) @[CircuitMath.scala 32:10]
      node _T_135 = mux(_T_131, UInt<2>("h03"), _T_134) @[CircuitMath.scala 32:10]
      node _T_136 = bits(_T_129, 3, 3) @[CircuitMath.scala 32:12]
      node _T_137 = bits(_T_129, 2, 2) @[CircuitMath.scala 32:12]
      node _T_138 = bits(_T_129, 1, 1) @[CircuitMath.scala 30:8]
      node _T_139 = mux(_T_137, UInt<2>("h02"), _T_138) @[CircuitMath.scala 32:10]
      node _T_140 = mux(_T_136, UInt<2>("h03"), _T_139) @[CircuitMath.scala 32:10]
      node _T_141 = mux(_T_130, _T_135, _T_140) @[CircuitMath.scala 38:21]
      node _T_142 = cat(_T_130, _T_141) @[Cat.scala 29:58]
      node _T_143 = bits(_T_126, 7, 4) @[CircuitMath.scala 35:17]
      node _T_144 = bits(_T_126, 3, 0) @[CircuitMath.scala 36:17]
      node _T_145 = orr(_T_143) @[CircuitMath.scala 37:22]
      node _T_146 = bits(_T_143, 3, 3) @[CircuitMath.scala 32:12]
      node _T_147 = bits(_T_143, 2, 2) @[CircuitMath.scala 32:12]
      node _T_148 = bits(_T_143, 1, 1) @[CircuitMath.scala 30:8]
      node _T_149 = mux(_T_147, UInt<2>("h02"), _T_148) @[CircuitMath.scala 32:10]
      node _T_150 = mux(_T_146, UInt<2>("h03"), _T_149) @[CircuitMath.scala 32:10]
      node _T_151 = bits(_T_144, 3, 3) @[CircuitMath.scala 32:12]
      node _T_152 = bits(_T_144, 2, 2) @[CircuitMath.scala 32:12]
      node _T_153 = bits(_T_144, 1, 1) @[CircuitMath.scala 30:8]
      node _T_154 = mux(_T_152, UInt<2>("h02"), _T_153) @[CircuitMath.scala 32:10]
      node _T_155 = mux(_T_151, UInt<2>("h03"), _T_154) @[CircuitMath.scala 32:10]
      node _T_156 = mux(_T_145, _T_150, _T_155) @[CircuitMath.scala 38:21]
      node _T_157 = cat(_T_145, _T_156) @[Cat.scala 29:58]
      node _T_158 = mux(_T_127, _T_142, _T_157) @[CircuitMath.scala 38:21]
      node _T_159 = cat(_T_127, _T_158) @[Cat.scala 29:58]
      node _T_160 = bits(_T_123, 15, 8) @[CircuitMath.scala 35:17]
      node _T_161 = bits(_T_123, 7, 0) @[CircuitMath.scala 36:17]
      node _T_162 = orr(_T_160) @[CircuitMath.scala 37:22]
      node _T_163 = bits(_T_160, 7, 4) @[CircuitMath.scala 35:17]
      node _T_164 = bits(_T_160, 3, 0) @[CircuitMath.scala 36:17]
      node _T_165 = orr(_T_163) @[CircuitMath.scala 37:22]
      node _T_166 = bits(_T_163, 3, 3) @[CircuitMath.scala 32:12]
      node _T_167 = bits(_T_163, 2, 2) @[CircuitMath.scala 32:12]
      node _T_168 = bits(_T_163, 1, 1) @[CircuitMath.scala 30:8]
      node _T_169 = mux(_T_167, UInt<2>("h02"), _T_168) @[CircuitMath.scala 32:10]
      node _T_170 = mux(_T_166, UInt<2>("h03"), _T_169) @[CircuitMath.scala 32:10]
      node _T_171 = bits(_T_164, 3, 3) @[CircuitMath.scala 32:12]
      node _T_172 = bits(_T_164, 2, 2) @[CircuitMath.scala 32:12]
      node _T_173 = bits(_T_164, 1, 1) @[CircuitMath.scala 30:8]
      node _T_174 = mux(_T_172, UInt<2>("h02"), _T_173) @[CircuitMath.scala 32:10]
      node _T_175 = mux(_T_171, UInt<2>("h03"), _T_174) @[CircuitMath.scala 32:10]
      node _T_176 = mux(_T_165, _T_170, _T_175) @[CircuitMath.scala 38:21]
      node _T_177 = cat(_T_165, _T_176) @[Cat.scala 29:58]
      node _T_178 = bits(_T_161, 7, 4) @[CircuitMath.scala 35:17]
      node _T_179 = bits(_T_161, 3, 0) @[CircuitMath.scala 36:17]
      node _T_180 = orr(_T_178) @[CircuitMath.scala 37:22]
      node _T_181 = bits(_T_178, 3, 3) @[CircuitMath.scala 32:12]
      node _T_182 = bits(_T_178, 2, 2) @[CircuitMath.scala 32:12]
      node _T_183 = bits(_T_178, 1, 1) @[CircuitMath.scala 30:8]
      node _T_184 = mux(_T_182, UInt<2>("h02"), _T_183) @[CircuitMath.scala 32:10]
      node _T_185 = mux(_T_181, UInt<2>("h03"), _T_184) @[CircuitMath.scala 32:10]
      node _T_186 = bits(_T_179, 3, 3) @[CircuitMath.scala 32:12]
      node _T_187 = bits(_T_179, 2, 2) @[CircuitMath.scala 32:12]
      node _T_188 = bits(_T_179, 1, 1) @[CircuitMath.scala 30:8]
      node _T_189 = mux(_T_187, UInt<2>("h02"), _T_188) @[CircuitMath.scala 32:10]
      node _T_190 = mux(_T_186, UInt<2>("h03"), _T_189) @[CircuitMath.scala 32:10]
      node _T_191 = mux(_T_180, _T_185, _T_190) @[CircuitMath.scala 38:21]
      node _T_192 = cat(_T_180, _T_191) @[Cat.scala 29:58]
      node _T_193 = mux(_T_162, _T_177, _T_192) @[CircuitMath.scala 38:21]
      node _T_194 = cat(_T_162, _T_193) @[Cat.scala 29:58]
      node _T_195 = mux(_T_124, _T_159, _T_194) @[CircuitMath.scala 38:21]
      node _T_196 = cat(_T_124, _T_195) @[Cat.scala 29:58]
      node _T_197 = bits(_T_120, 31, 16) @[CircuitMath.scala 35:17]
      node _T_198 = bits(_T_120, 15, 0) @[CircuitMath.scala 36:17]
      node _T_199 = orr(_T_197) @[CircuitMath.scala 37:22]
      node _T_200 = bits(_T_197, 15, 8) @[CircuitMath.scala 35:17]
      node _T_201 = bits(_T_197, 7, 0) @[CircuitMath.scala 36:17]
      node _T_202 = orr(_T_200) @[CircuitMath.scala 37:22]
      node _T_203 = bits(_T_200, 7, 4) @[CircuitMath.scala 35:17]
      node _T_204 = bits(_T_200, 3, 0) @[CircuitMath.scala 36:17]
      node _T_205 = orr(_T_203) @[CircuitMath.scala 37:22]
      node _T_206 = bits(_T_203, 3, 3) @[CircuitMath.scala 32:12]
      node _T_207 = bits(_T_203, 2, 2) @[CircuitMath.scala 32:12]
      node _T_208 = bits(_T_203, 1, 1) @[CircuitMath.scala 30:8]
      node _T_209 = mux(_T_207, UInt<2>("h02"), _T_208) @[CircuitMath.scala 32:10]
      node _T_210 = mux(_T_206, UInt<2>("h03"), _T_209) @[CircuitMath.scala 32:10]
      node _T_211 = bits(_T_204, 3, 3) @[CircuitMath.scala 32:12]
      node _T_212 = bits(_T_204, 2, 2) @[CircuitMath.scala 32:12]
      node _T_213 = bits(_T_204, 1, 1) @[CircuitMath.scala 30:8]
      node _T_214 = mux(_T_212, UInt<2>("h02"), _T_213) @[CircuitMath.scala 32:10]
      node _T_215 = mux(_T_211, UInt<2>("h03"), _T_214) @[CircuitMath.scala 32:10]
      node _T_216 = mux(_T_205, _T_210, _T_215) @[CircuitMath.scala 38:21]
      node _T_217 = cat(_T_205, _T_216) @[Cat.scala 29:58]
      node _T_218 = bits(_T_201, 7, 4) @[CircuitMath.scala 35:17]
      node _T_219 = bits(_T_201, 3, 0) @[CircuitMath.scala 36:17]
      node _T_220 = orr(_T_218) @[CircuitMath.scala 37:22]
      node _T_221 = bits(_T_218, 3, 3) @[CircuitMath.scala 32:12]
      node _T_222 = bits(_T_218, 2, 2) @[CircuitMath.scala 32:12]
      node _T_223 = bits(_T_218, 1, 1) @[CircuitMath.scala 30:8]
      node _T_224 = mux(_T_222, UInt<2>("h02"), _T_223) @[CircuitMath.scala 32:10]
      node _T_225 = mux(_T_221, UInt<2>("h03"), _T_224) @[CircuitMath.scala 32:10]
      node _T_226 = bits(_T_219, 3, 3) @[CircuitMath.scala 32:12]
      node _T_227 = bits(_T_219, 2, 2) @[CircuitMath.scala 32:12]
      node _T_228 = bits(_T_219, 1, 1) @[CircuitMath.scala 30:8]
      node _T_229 = mux(_T_227, UInt<2>("h02"), _T_228) @[CircuitMath.scala 32:10]
      node _T_230 = mux(_T_226, UInt<2>("h03"), _T_229) @[CircuitMath.scala 32:10]
      node _T_231 = mux(_T_220, _T_225, _T_230) @[CircuitMath.scala 38:21]
      node _T_232 = cat(_T_220, _T_231) @[Cat.scala 29:58]
      node _T_233 = mux(_T_202, _T_217, _T_232) @[CircuitMath.scala 38:21]
      node _T_234 = cat(_T_202, _T_233) @[Cat.scala 29:58]
      node _T_235 = bits(_T_198, 15, 8) @[CircuitMath.scala 35:17]
      node _T_236 = bits(_T_198, 7, 0) @[CircuitMath.scala 36:17]
      node _T_237 = orr(_T_235) @[CircuitMath.scala 37:22]
      node _T_238 = bits(_T_235, 7, 4) @[CircuitMath.scala 35:17]
      node _T_239 = bits(_T_235, 3, 0) @[CircuitMath.scala 36:17]
      node _T_240 = orr(_T_238) @[CircuitMath.scala 37:22]
      node _T_241 = bits(_T_238, 3, 3) @[CircuitMath.scala 32:12]
      node _T_242 = bits(_T_238, 2, 2) @[CircuitMath.scala 32:12]
      node _T_243 = bits(_T_238, 1, 1) @[CircuitMath.scala 30:8]
      node _T_244 = mux(_T_242, UInt<2>("h02"), _T_243) @[CircuitMath.scala 32:10]
      node _T_245 = mux(_T_241, UInt<2>("h03"), _T_244) @[CircuitMath.scala 32:10]
      node _T_246 = bits(_T_239, 3, 3) @[CircuitMath.scala 32:12]
      node _T_247 = bits(_T_239, 2, 2) @[CircuitMath.scala 32:12]
      node _T_248 = bits(_T_239, 1, 1) @[CircuitMath.scala 30:8]
      node _T_249 = mux(_T_247, UInt<2>("h02"), _T_248) @[CircuitMath.scala 32:10]
      node _T_250 = mux(_T_246, UInt<2>("h03"), _T_249) @[CircuitMath.scala 32:10]
      node _T_251 = mux(_T_240, _T_245, _T_250) @[CircuitMath.scala 38:21]
      node _T_252 = cat(_T_240, _T_251) @[Cat.scala 29:58]
      node _T_253 = bits(_T_236, 7, 4) @[CircuitMath.scala 35:17]
      node _T_254 = bits(_T_236, 3, 0) @[CircuitMath.scala 36:17]
      node _T_255 = orr(_T_253) @[CircuitMath.scala 37:22]
      node _T_256 = bits(_T_253, 3, 3) @[CircuitMath.scala 32:12]
      node _T_257 = bits(_T_253, 2, 2) @[CircuitMath.scala 32:12]
      node _T_258 = bits(_T_253, 1, 1) @[CircuitMath.scala 30:8]
      node _T_259 = mux(_T_257, UInt<2>("h02"), _T_258) @[CircuitMath.scala 32:10]
      node _T_260 = mux(_T_256, UInt<2>("h03"), _T_259) @[CircuitMath.scala 32:10]
      node _T_261 = bits(_T_254, 3, 3) @[CircuitMath.scala 32:12]
      node _T_262 = bits(_T_254, 2, 2) @[CircuitMath.scala 32:12]
      node _T_263 = bits(_T_254, 1, 1) @[CircuitMath.scala 30:8]
      node _T_264 = mux(_T_262, UInt<2>("h02"), _T_263) @[CircuitMath.scala 32:10]
      node _T_265 = mux(_T_261, UInt<2>("h03"), _T_264) @[CircuitMath.scala 32:10]
      node _T_266 = mux(_T_255, _T_260, _T_265) @[CircuitMath.scala 38:21]
      node _T_267 = cat(_T_255, _T_266) @[Cat.scala 29:58]
      node _T_268 = mux(_T_237, _T_252, _T_267) @[CircuitMath.scala 38:21]
      node _T_269 = cat(_T_237, _T_268) @[Cat.scala 29:58]
      node _T_270 = mux(_T_199, _T_234, _T_269) @[CircuitMath.scala 38:21]
      node _T_271 = cat(_T_199, _T_270) @[Cat.scala 29:58]
      node _T_272 = mux(_T_121, _T_196, _T_271) @[CircuitMath.scala 38:21]
      node _T_273 = cat(_T_121, _T_272) @[Cat.scala 29:58]
      node _T_274 = and(_T_273, _T_117) @[Multiplier.scala 151:48]
      node _T_275 = bits(remainder, 63, 0) @[Multiplier.scala 152:39]
      node _T_276 = bits(_T_275, 63, 32) @[CircuitMath.scala 35:17]
      node _T_277 = bits(_T_275, 31, 0) @[CircuitMath.scala 36:17]
      node _T_278 = orr(_T_276) @[CircuitMath.scala 37:22]
      node _T_279 = bits(_T_276, 31, 16) @[CircuitMath.scala 35:17]
      node _T_280 = bits(_T_276, 15, 0) @[CircuitMath.scala 36:17]
      node _T_281 = orr(_T_279) @[CircuitMath.scala 37:22]
      node _T_282 = bits(_T_279, 15, 8) @[CircuitMath.scala 35:17]
      node _T_283 = bits(_T_279, 7, 0) @[CircuitMath.scala 36:17]
      node _T_284 = orr(_T_282) @[CircuitMath.scala 37:22]
      node _T_285 = bits(_T_282, 7, 4) @[CircuitMath.scala 35:17]
      node _T_286 = bits(_T_282, 3, 0) @[CircuitMath.scala 36:17]
      node _T_287 = orr(_T_285) @[CircuitMath.scala 37:22]
      node _T_288 = bits(_T_285, 3, 3) @[CircuitMath.scala 32:12]
      node _T_289 = bits(_T_285, 2, 2) @[CircuitMath.scala 32:12]
      node _T_290 = bits(_T_285, 1, 1) @[CircuitMath.scala 30:8]
      node _T_291 = mux(_T_289, UInt<2>("h02"), _T_290) @[CircuitMath.scala 32:10]
      node _T_292 = mux(_T_288, UInt<2>("h03"), _T_291) @[CircuitMath.scala 32:10]
      node _T_293 = bits(_T_286, 3, 3) @[CircuitMath.scala 32:12]
      node _T_294 = bits(_T_286, 2, 2) @[CircuitMath.scala 32:12]
      node _T_295 = bits(_T_286, 1, 1) @[CircuitMath.scala 30:8]
      node _T_296 = mux(_T_294, UInt<2>("h02"), _T_295) @[CircuitMath.scala 32:10]
      node _T_297 = mux(_T_293, UInt<2>("h03"), _T_296) @[CircuitMath.scala 32:10]
      node _T_298 = mux(_T_287, _T_292, _T_297) @[CircuitMath.scala 38:21]
      node _T_299 = cat(_T_287, _T_298) @[Cat.scala 29:58]
      node _T_300 = bits(_T_283, 7, 4) @[CircuitMath.scala 35:17]
      node _T_301 = bits(_T_283, 3, 0) @[CircuitMath.scala 36:17]
      node _T_302 = orr(_T_300) @[CircuitMath.scala 37:22]
      node _T_303 = bits(_T_300, 3, 3) @[CircuitMath.scala 32:12]
      node _T_304 = bits(_T_300, 2, 2) @[CircuitMath.scala 32:12]
      node _T_305 = bits(_T_300, 1, 1) @[CircuitMath.scala 30:8]
      node _T_306 = mux(_T_304, UInt<2>("h02"), _T_305) @[CircuitMath.scala 32:10]
      node _T_307 = mux(_T_303, UInt<2>("h03"), _T_306) @[CircuitMath.scala 32:10]
      node _T_308 = bits(_T_301, 3, 3) @[CircuitMath.scala 32:12]
      node _T_309 = bits(_T_301, 2, 2) @[CircuitMath.scala 32:12]
      node _T_310 = bits(_T_301, 1, 1) @[CircuitMath.scala 30:8]
      node _T_311 = mux(_T_309, UInt<2>("h02"), _T_310) @[CircuitMath.scala 32:10]
      node _T_312 = mux(_T_308, UInt<2>("h03"), _T_311) @[CircuitMath.scala 32:10]
      node _T_313 = mux(_T_302, _T_307, _T_312) @[CircuitMath.scala 38:21]
      node _T_314 = cat(_T_302, _T_313) @[Cat.scala 29:58]
      node _T_315 = mux(_T_284, _T_299, _T_314) @[CircuitMath.scala 38:21]
      node _T_316 = cat(_T_284, _T_315) @[Cat.scala 29:58]
      node _T_317 = bits(_T_280, 15, 8) @[CircuitMath.scala 35:17]
      node _T_318 = bits(_T_280, 7, 0) @[CircuitMath.scala 36:17]
      node _T_319 = orr(_T_317) @[CircuitMath.scala 37:22]
      node _T_320 = bits(_T_317, 7, 4) @[CircuitMath.scala 35:17]
      node _T_321 = bits(_T_317, 3, 0) @[CircuitMath.scala 36:17]
      node _T_322 = orr(_T_320) @[CircuitMath.scala 37:22]
      node _T_323 = bits(_T_320, 3, 3) @[CircuitMath.scala 32:12]
      node _T_324 = bits(_T_320, 2, 2) @[CircuitMath.scala 32:12]
      node _T_325 = bits(_T_320, 1, 1) @[CircuitMath.scala 30:8]
      node _T_326 = mux(_T_324, UInt<2>("h02"), _T_325) @[CircuitMath.scala 32:10]
      node _T_327 = mux(_T_323, UInt<2>("h03"), _T_326) @[CircuitMath.scala 32:10]
      node _T_328 = bits(_T_321, 3, 3) @[CircuitMath.scala 32:12]
      node _T_329 = bits(_T_321, 2, 2) @[CircuitMath.scala 32:12]
      node _T_330 = bits(_T_321, 1, 1) @[CircuitMath.scala 30:8]
      node _T_331 = mux(_T_329, UInt<2>("h02"), _T_330) @[CircuitMath.scala 32:10]
      node _T_332 = mux(_T_328, UInt<2>("h03"), _T_331) @[CircuitMath.scala 32:10]
      node _T_333 = mux(_T_322, _T_327, _T_332) @[CircuitMath.scala 38:21]
      node _T_334 = cat(_T_322, _T_333) @[Cat.scala 29:58]
      node _T_335 = bits(_T_318, 7, 4) @[CircuitMath.scala 35:17]
      node _T_336 = bits(_T_318, 3, 0) @[CircuitMath.scala 36:17]
      node _T_337 = orr(_T_335) @[CircuitMath.scala 37:22]
      node _T_338 = bits(_T_335, 3, 3) @[CircuitMath.scala 32:12]
      node _T_339 = bits(_T_335, 2, 2) @[CircuitMath.scala 32:12]
      node _T_340 = bits(_T_335, 1, 1) @[CircuitMath.scala 30:8]
      node _T_341 = mux(_T_339, UInt<2>("h02"), _T_340) @[CircuitMath.scala 32:10]
      node _T_342 = mux(_T_338, UInt<2>("h03"), _T_341) @[CircuitMath.scala 32:10]
      node _T_343 = bits(_T_336, 3, 3) @[CircuitMath.scala 32:12]
      node _T_344 = bits(_T_336, 2, 2) @[CircuitMath.scala 32:12]
      node _T_345 = bits(_T_336, 1, 1) @[CircuitMath.scala 30:8]
      node _T_346 = mux(_T_344, UInt<2>("h02"), _T_345) @[CircuitMath.scala 32:10]
      node _T_347 = mux(_T_343, UInt<2>("h03"), _T_346) @[CircuitMath.scala 32:10]
      node _T_348 = mux(_T_337, _T_342, _T_347) @[CircuitMath.scala 38:21]
      node _T_349 = cat(_T_337, _T_348) @[Cat.scala 29:58]
      node _T_350 = mux(_T_319, _T_334, _T_349) @[CircuitMath.scala 38:21]
      node _T_351 = cat(_T_319, _T_350) @[Cat.scala 29:58]
      node _T_352 = mux(_T_281, _T_316, _T_351) @[CircuitMath.scala 38:21]
      node _T_353 = cat(_T_281, _T_352) @[Cat.scala 29:58]
      node _T_354 = bits(_T_277, 31, 16) @[CircuitMath.scala 35:17]
      node _T_355 = bits(_T_277, 15, 0) @[CircuitMath.scala 36:17]
      node _T_356 = orr(_T_354) @[CircuitMath.scala 37:22]
      node _T_357 = bits(_T_354, 15, 8) @[CircuitMath.scala 35:17]
      node _T_358 = bits(_T_354, 7, 0) @[CircuitMath.scala 36:17]
      node _T_359 = orr(_T_357) @[CircuitMath.scala 37:22]
      node _T_360 = bits(_T_357, 7, 4) @[CircuitMath.scala 35:17]
      node _T_361 = bits(_T_357, 3, 0) @[CircuitMath.scala 36:17]
      node _T_362 = orr(_T_360) @[CircuitMath.scala 37:22]
      node _T_363 = bits(_T_360, 3, 3) @[CircuitMath.scala 32:12]
      node _T_364 = bits(_T_360, 2, 2) @[CircuitMath.scala 32:12]
      node _T_365 = bits(_T_360, 1, 1) @[CircuitMath.scala 30:8]
      node _T_366 = mux(_T_364, UInt<2>("h02"), _T_365) @[CircuitMath.scala 32:10]
      node _T_367 = mux(_T_363, UInt<2>("h03"), _T_366) @[CircuitMath.scala 32:10]
      node _T_368 = bits(_T_361, 3, 3) @[CircuitMath.scala 32:12]
      node _T_369 = bits(_T_361, 2, 2) @[CircuitMath.scala 32:12]
      node _T_370 = bits(_T_361, 1, 1) @[CircuitMath.scala 30:8]
      node _T_371 = mux(_T_369, UInt<2>("h02"), _T_370) @[CircuitMath.scala 32:10]
      node _T_372 = mux(_T_368, UInt<2>("h03"), _T_371) @[CircuitMath.scala 32:10]
      node _T_373 = mux(_T_362, _T_367, _T_372) @[CircuitMath.scala 38:21]
      node _T_374 = cat(_T_362, _T_373) @[Cat.scala 29:58]
      node _T_375 = bits(_T_358, 7, 4) @[CircuitMath.scala 35:17]
      node _T_376 = bits(_T_358, 3, 0) @[CircuitMath.scala 36:17]
      node _T_377 = orr(_T_375) @[CircuitMath.scala 37:22]
      node _T_378 = bits(_T_375, 3, 3) @[CircuitMath.scala 32:12]
      node _T_379 = bits(_T_375, 2, 2) @[CircuitMath.scala 32:12]
      node _T_380 = bits(_T_375, 1, 1) @[CircuitMath.scala 30:8]
      node _T_381 = mux(_T_379, UInt<2>("h02"), _T_380) @[CircuitMath.scala 32:10]
      node _T_382 = mux(_T_378, UInt<2>("h03"), _T_381) @[CircuitMath.scala 32:10]
      node _T_383 = bits(_T_376, 3, 3) @[CircuitMath.scala 32:12]
      node _T_384 = bits(_T_376, 2, 2) @[CircuitMath.scala 32:12]
      node _T_385 = bits(_T_376, 1, 1) @[CircuitMath.scala 30:8]
      node _T_386 = mux(_T_384, UInt<2>("h02"), _T_385) @[CircuitMath.scala 32:10]
      node _T_387 = mux(_T_383, UInt<2>("h03"), _T_386) @[CircuitMath.scala 32:10]
      node _T_388 = mux(_T_377, _T_382, _T_387) @[CircuitMath.scala 38:21]
      node _T_389 = cat(_T_377, _T_388) @[Cat.scala 29:58]
      node _T_390 = mux(_T_359, _T_374, _T_389) @[CircuitMath.scala 38:21]
      node _T_391 = cat(_T_359, _T_390) @[Cat.scala 29:58]
      node _T_392 = bits(_T_355, 15, 8) @[CircuitMath.scala 35:17]
      node _T_393 = bits(_T_355, 7, 0) @[CircuitMath.scala 36:17]
      node _T_394 = orr(_T_392) @[CircuitMath.scala 37:22]
      node _T_395 = bits(_T_392, 7, 4) @[CircuitMath.scala 35:17]
      node _T_396 = bits(_T_392, 3, 0) @[CircuitMath.scala 36:17]
      node _T_397 = orr(_T_395) @[CircuitMath.scala 37:22]
      node _T_398 = bits(_T_395, 3, 3) @[CircuitMath.scala 32:12]
      node _T_399 = bits(_T_395, 2, 2) @[CircuitMath.scala 32:12]
      node _T_400 = bits(_T_395, 1, 1) @[CircuitMath.scala 30:8]
      node _T_401 = mux(_T_399, UInt<2>("h02"), _T_400) @[CircuitMath.scala 32:10]
      node _T_402 = mux(_T_398, UInt<2>("h03"), _T_401) @[CircuitMath.scala 32:10]
      node _T_403 = bits(_T_396, 3, 3) @[CircuitMath.scala 32:12]
      node _T_404 = bits(_T_396, 2, 2) @[CircuitMath.scala 32:12]
      node _T_405 = bits(_T_396, 1, 1) @[CircuitMath.scala 30:8]
      node _T_406 = mux(_T_404, UInt<2>("h02"), _T_405) @[CircuitMath.scala 32:10]
      node _T_407 = mux(_T_403, UInt<2>("h03"), _T_406) @[CircuitMath.scala 32:10]
      node _T_408 = mux(_T_397, _T_402, _T_407) @[CircuitMath.scala 38:21]
      node _T_409 = cat(_T_397, _T_408) @[Cat.scala 29:58]
      node _T_410 = bits(_T_393, 7, 4) @[CircuitMath.scala 35:17]
      node _T_411 = bits(_T_393, 3, 0) @[CircuitMath.scala 36:17]
      node _T_412 = orr(_T_410) @[CircuitMath.scala 37:22]
      node _T_413 = bits(_T_410, 3, 3) @[CircuitMath.scala 32:12]
      node _T_414 = bits(_T_410, 2, 2) @[CircuitMath.scala 32:12]
      node _T_415 = bits(_T_410, 1, 1) @[CircuitMath.scala 30:8]
      node _T_416 = mux(_T_414, UInt<2>("h02"), _T_415) @[CircuitMath.scala 32:10]
      node _T_417 = mux(_T_413, UInt<2>("h03"), _T_416) @[CircuitMath.scala 32:10]
      node _T_418 = bits(_T_411, 3, 3) @[CircuitMath.scala 32:12]
      node _T_419 = bits(_T_411, 2, 2) @[CircuitMath.scala 32:12]
      node _T_420 = bits(_T_411, 1, 1) @[CircuitMath.scala 30:8]
      node _T_421 = mux(_T_419, UInt<2>("h02"), _T_420) @[CircuitMath.scala 32:10]
      node _T_422 = mux(_T_418, UInt<2>("h03"), _T_421) @[CircuitMath.scala 32:10]
      node _T_423 = mux(_T_412, _T_417, _T_422) @[CircuitMath.scala 38:21]
      node _T_424 = cat(_T_412, _T_423) @[Cat.scala 29:58]
      node _T_425 = mux(_T_394, _T_409, _T_424) @[CircuitMath.scala 38:21]
      node _T_426 = cat(_T_394, _T_425) @[Cat.scala 29:58]
      node _T_427 = mux(_T_356, _T_391, _T_426) @[CircuitMath.scala 38:21]
      node _T_428 = cat(_T_356, _T_427) @[Cat.scala 29:58]
      node _T_429 = mux(_T_278, _T_353, _T_428) @[CircuitMath.scala 38:21]
      node _T_430 = cat(_T_278, _T_429) @[Cat.scala 29:58]
      node _T_431 = not(_T_117) @[Multiplier.scala 152:53]
      node _T_432 = or(_T_430, _T_431) @[Multiplier.scala 152:51]
      node _T_433 = sub(_T_432, _T_274) @[Multiplier.scala 153:35]
      node _T_434 = tail(_T_433, 1) @[Multiplier.scala 153:35]
      node _T_435 = not(_T_434) @[Multiplier.scala 153:21]
      node _T_436 = eq(count, UInt<1>("h00")) @[Multiplier.scala 154:24]
      node _T_437 = eq(_T_116, UInt<1>("h00")) @[Multiplier.scala 154:33]
      node _T_438 = and(_T_436, _T_437) @[Multiplier.scala 154:30]
      node _T_439 = geq(_T_435, UInt<1>("h01")) @[Multiplier.scala 154:52]
      node _T_440 = and(_T_438, _T_439) @[Multiplier.scala 154:41]
      when _T_440 : @[Multiplier.scala 155:19]
        node _T_441 = bits(remainder, 63, 0) @[Multiplier.scala 156:31]
        node _T_442 = dshl(_T_441, _T_435) @[Multiplier.scala 156:39]
        remainder <= _T_442 @[Multiplier.scala 156:19]
        node _T_443 = shr(_T_435, 0) @[Multiplier.scala 157:26]
        count <= _T_443 @[Multiplier.scala 157:15]
        skip @[Multiplier.scala 155:19]
      node _T_444 = eq(isHi, UInt<1>("h00")) @[Multiplier.scala 160:21]
      node _T_445 = and(_T_116, _T_444) @[Multiplier.scala 160:18]
      when _T_445 : @[Multiplier.scala 160:28]
        neg_out <= UInt<1>("h00") @[Multiplier.scala 160:38]
        skip @[Multiplier.scala 160:28]
      skip @[Multiplier.scala 130:50]
    node _T_446 = and(io.resp.ready, io.resp.valid) @[Decoupled.scala 40:37]
    node _T_447 = or(_T_446, io.kill) @[Multiplier.scala 162:24]
    when _T_447 : @[Multiplier.scala 162:36]
      state <= UInt<3>("h00") @[Multiplier.scala 163:11]
      skip @[Multiplier.scala 162:36]
    node _T_448 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    when _T_448 : @[Multiplier.scala 165:24]
      node _T_449 = or(lhs_sign, rhs_sign) @[Multiplier.scala 166:46]
      node _T_450 = mux(_T_449, UInt<3>("h01"), UInt<3>("h03")) @[Multiplier.scala 166:36]
      node _T_451 = mux(cmdMul, UInt<3>("h02"), _T_450) @[Multiplier.scala 166:17]
      state <= _T_451 @[Multiplier.scala 166:11]
      isHi <= cmdHi @[Multiplier.scala 167:10]
      resHi <= UInt<1>("h00") @[Multiplier.scala 168:11]
      node _T_452 = eq(io.req.bits.dw, UInt<1>("h00")) @[Multiplier.scala 79:60]
      node _T_453 = and(UInt<1>("h01"), _T_452) @[Multiplier.scala 79:50]
      node _T_454 = and(cmdMul, _T_453) @[Multiplier.scala 169:46]
      node _T_455 = mux(_T_454, UInt<6>("h020"), UInt<1>("h00")) @[Multiplier.scala 169:38]
      count <= _T_455 @[Multiplier.scala 169:11]
      node _T_456 = neq(lhs_sign, rhs_sign) @[Multiplier.scala 170:46]
      node _T_457 = mux(cmdHi, lhs_sign, _T_456) @[Multiplier.scala 170:19]
      neg_out <= _T_457 @[Multiplier.scala 170:13]
      node _T_458 = cat(rhs_sign, rhs_in) @[Cat.scala 29:58]
      divisor <= _T_458 @[Multiplier.scala 171:13]
      remainder <= lhs_in @[Multiplier.scala 172:15]
      req.tag <= io.req.bits.tag @[Multiplier.scala 173:9]
      req.in2 <= io.req.bits.in2 @[Multiplier.scala 173:9]
      req.in1 <= io.req.bits.in1 @[Multiplier.scala 173:9]
      req.dw <= io.req.bits.dw @[Multiplier.scala 173:9]
      req.fn <= io.req.bits.fn @[Multiplier.scala 173:9]
      skip @[Multiplier.scala 165:24]
    node _T_459 = xor(UInt<3>("h06"), UInt<3>("h07")) @[Multiplier.scala 176:37]
    node _T_460 = and(state, _T_459) @[Multiplier.scala 176:23]
    node _T_461 = not(UInt<3>("h07")) @[Multiplier.scala 176:70]
    node _T_462 = and(UInt<3>("h06"), _T_461) @[Multiplier.scala 176:68]
    node outMul = eq(_T_460, _T_462) @[Multiplier.scala 176:52]
    node _T_463 = eq(req.dw, UInt<1>("h00")) @[Multiplier.scala 79:60]
    node _T_464 = and(UInt<1>("h01"), _T_463) @[Multiplier.scala 79:50]
    node _T_465 = and(UInt<1>("h01"), _T_464) @[Multiplier.scala 177:30]
    node _T_466 = and(_T_465, outMul) @[Multiplier.scala 177:48]
    node _T_467 = bits(result, 63, 32) @[Multiplier.scala 177:65]
    node _T_468 = bits(result, 31, 0) @[Multiplier.scala 177:82]
    node loOut = mux(_T_466, _T_467, _T_468) @[Multiplier.scala 177:18]
    node _T_469 = eq(req.dw, UInt<1>("h00")) @[Multiplier.scala 79:60]
    node _T_470 = and(UInt<1>("h01"), _T_469) @[Multiplier.scala 79:50]
    node _T_471 = bits(loOut, 31, 31) @[Multiplier.scala 178:50]
    node _T_472 = bits(_T_471, 0, 0) @[Bitwise.scala 72:15]
    node _T_473 = mux(_T_472, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_474 = bits(result, 63, 32) @[Multiplier.scala 178:66]
    node hiOut = mux(_T_470, _T_473, _T_474) @[Multiplier.scala 178:18]
    io.resp.bits.tag <= req.tag @[Multiplier.scala 179:20]
    node _T_475 = cat(hiOut, loOut) @[Cat.scala 29:58]
    io.resp.bits.data <= _T_475 @[Multiplier.scala 181:21]
    node _T_476 = eq(state, UInt<3>("h06")) @[Multiplier.scala 182:27]
    node _T_477 = eq(state, UInt<3>("h07")) @[Multiplier.scala 182:51]
    node _T_478 = or(_T_476, _T_477) @[Multiplier.scala 182:42]
    io.resp.valid <= _T_478 @[Multiplier.scala 182:17]
    node _T_479 = eq(state, UInt<3>("h00")) @[Multiplier.scala 183:25]
    io.req.ready <= _T_479 @[Multiplier.scala 183:16]
    
  module DivUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, rs1_data : UInt<64>, rs2_data : UInt<64>, rs3_data : UInt<64>, pred_data : UInt<1>, kill : UInt<1>}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, predicated : UInt<1>, data : UInt<64>, fflags : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, flags : UInt<5>}}, addr : UInt<40>, mxcpt : {valid : UInt<1>, bits : UInt<17>}, sfence : {valid : UInt<1>, bits : {rs1 : UInt<1>, rs2 : UInt<1>, addr : UInt<39>, asid : UInt<1>}}}}, flip brupdate : {b1 : {resolve_mask : UInt<8>, mispredict_mask : UInt<8>}, b2 : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, valid : UInt<1>, mispredict : UInt<1>, taken : UInt<1>, cfi_type : UInt<3>, pc_sel : UInt<2>, jalr_target : UInt<40>, target_offset : SInt<1>}}, bypass : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, data : UInt<64>, predicated : UInt<1>, fflags : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, flags : UInt<5>}}}}[0]}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg r_uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, clock @[functional-unit.scala 640:18]
    wire do_kill : UInt<1> @[functional-unit.scala 642:21]
    do_kill <= io.req.bits.kill @[functional-unit.scala 643:11]
    node _T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    when _T : @[functional-unit.scala 645:24]
      node _T_1 = and(io.brupdate.b1.mispredict_mask, io.req.bits.uop.br_mask) @[util.scala 118:51]
      node _T_2 = neq(_T_1, UInt<1>("h00")) @[util.scala 118:59]
      node _T_3 = or(_T_2, io.req.bits.kill) @[functional-unit.scala 647:63]
      do_kill <= _T_3 @[functional-unit.scala 647:13]
      r_uop.debug_tsrc <= io.req.bits.uop.debug_tsrc @[functional-unit.scala 648:11]
      r_uop.debug_fsrc <= io.req.bits.uop.debug_fsrc @[functional-unit.scala 648:11]
      r_uop.bp_xcpt_if <= io.req.bits.uop.bp_xcpt_if @[functional-unit.scala 648:11]
      r_uop.bp_debug_if <= io.req.bits.uop.bp_debug_if @[functional-unit.scala 648:11]
      r_uop.xcpt_ma_if <= io.req.bits.uop.xcpt_ma_if @[functional-unit.scala 648:11]
      r_uop.xcpt_ae_if <= io.req.bits.uop.xcpt_ae_if @[functional-unit.scala 648:11]
      r_uop.xcpt_pf_if <= io.req.bits.uop.xcpt_pf_if @[functional-unit.scala 648:11]
      r_uop.fp_single <= io.req.bits.uop.fp_single @[functional-unit.scala 648:11]
      r_uop.fp_val <= io.req.bits.uop.fp_val @[functional-unit.scala 648:11]
      r_uop.frs3_en <= io.req.bits.uop.frs3_en @[functional-unit.scala 648:11]
      r_uop.lrs2_rtype <= io.req.bits.uop.lrs2_rtype @[functional-unit.scala 648:11]
      r_uop.lrs1_rtype <= io.req.bits.uop.lrs1_rtype @[functional-unit.scala 648:11]
      r_uop.dst_rtype <= io.req.bits.uop.dst_rtype @[functional-unit.scala 648:11]
      r_uop.ldst_val <= io.req.bits.uop.ldst_val @[functional-unit.scala 648:11]
      r_uop.lrs3 <= io.req.bits.uop.lrs3 @[functional-unit.scala 648:11]
      r_uop.lrs2 <= io.req.bits.uop.lrs2 @[functional-unit.scala 648:11]
      r_uop.lrs1 <= io.req.bits.uop.lrs1 @[functional-unit.scala 648:11]
      r_uop.ldst <= io.req.bits.uop.ldst @[functional-unit.scala 648:11]
      r_uop.ldst_is_rs1 <= io.req.bits.uop.ldst_is_rs1 @[functional-unit.scala 648:11]
      r_uop.flush_on_commit <= io.req.bits.uop.flush_on_commit @[functional-unit.scala 648:11]
      r_uop.is_unique <= io.req.bits.uop.is_unique @[functional-unit.scala 648:11]
      r_uop.is_sys_pc2epc <= io.req.bits.uop.is_sys_pc2epc @[functional-unit.scala 648:11]
      r_uop.uses_stq <= io.req.bits.uop.uses_stq @[functional-unit.scala 648:11]
      r_uop.uses_ldq <= io.req.bits.uop.uses_ldq @[functional-unit.scala 648:11]
      r_uop.is_amo <= io.req.bits.uop.is_amo @[functional-unit.scala 648:11]
      r_uop.is_fencei <= io.req.bits.uop.is_fencei @[functional-unit.scala 648:11]
      r_uop.is_fence <= io.req.bits.uop.is_fence @[functional-unit.scala 648:11]
      r_uop.mem_signed <= io.req.bits.uop.mem_signed @[functional-unit.scala 648:11]
      r_uop.mem_size <= io.req.bits.uop.mem_size @[functional-unit.scala 648:11]
      r_uop.mem_cmd <= io.req.bits.uop.mem_cmd @[functional-unit.scala 648:11]
      r_uop.bypassable <= io.req.bits.uop.bypassable @[functional-unit.scala 648:11]
      r_uop.exc_cause <= io.req.bits.uop.exc_cause @[functional-unit.scala 648:11]
      r_uop.exception <= io.req.bits.uop.exception @[functional-unit.scala 648:11]
      r_uop.stale_pdst <= io.req.bits.uop.stale_pdst @[functional-unit.scala 648:11]
      r_uop.ppred_busy <= io.req.bits.uop.ppred_busy @[functional-unit.scala 648:11]
      r_uop.prs3_busy <= io.req.bits.uop.prs3_busy @[functional-unit.scala 648:11]
      r_uop.prs2_busy <= io.req.bits.uop.prs2_busy @[functional-unit.scala 648:11]
      r_uop.prs1_busy <= io.req.bits.uop.prs1_busy @[functional-unit.scala 648:11]
      r_uop.ppred <= io.req.bits.uop.ppred @[functional-unit.scala 648:11]
      r_uop.prs3 <= io.req.bits.uop.prs3 @[functional-unit.scala 648:11]
      r_uop.prs2 <= io.req.bits.uop.prs2 @[functional-unit.scala 648:11]
      r_uop.prs1 <= io.req.bits.uop.prs1 @[functional-unit.scala 648:11]
      r_uop.pdst <= io.req.bits.uop.pdst @[functional-unit.scala 648:11]
      r_uop.rxq_idx <= io.req.bits.uop.rxq_idx @[functional-unit.scala 648:11]
      r_uop.stq_idx <= io.req.bits.uop.stq_idx @[functional-unit.scala 648:11]
      r_uop.ldq_idx <= io.req.bits.uop.ldq_idx @[functional-unit.scala 648:11]
      r_uop.rob_idx <= io.req.bits.uop.rob_idx @[functional-unit.scala 648:11]
      r_uop.csr_addr <= io.req.bits.uop.csr_addr @[functional-unit.scala 648:11]
      r_uop.imm_packed <= io.req.bits.uop.imm_packed @[functional-unit.scala 648:11]
      r_uop.taken <= io.req.bits.uop.taken @[functional-unit.scala 648:11]
      r_uop.pc_lob <= io.req.bits.uop.pc_lob @[functional-unit.scala 648:11]
      r_uop.edge_inst <= io.req.bits.uop.edge_inst @[functional-unit.scala 648:11]
      r_uop.ftq_idx <= io.req.bits.uop.ftq_idx @[functional-unit.scala 648:11]
      r_uop.br_tag <= io.req.bits.uop.br_tag @[functional-unit.scala 648:11]
      r_uop.br_mask <= io.req.bits.uop.br_mask @[functional-unit.scala 648:11]
      r_uop.is_sfb <= io.req.bits.uop.is_sfb @[functional-unit.scala 648:11]
      r_uop.is_jal <= io.req.bits.uop.is_jal @[functional-unit.scala 648:11]
      r_uop.is_jalr <= io.req.bits.uop.is_jalr @[functional-unit.scala 648:11]
      r_uop.is_br <= io.req.bits.uop.is_br @[functional-unit.scala 648:11]
      r_uop.iw_p2_poisoned <= io.req.bits.uop.iw_p2_poisoned @[functional-unit.scala 648:11]
      r_uop.iw_p1_poisoned <= io.req.bits.uop.iw_p1_poisoned @[functional-unit.scala 648:11]
      r_uop.iw_state <= io.req.bits.uop.iw_state @[functional-unit.scala 648:11]
      r_uop.ctrl.is_std <= io.req.bits.uop.ctrl.is_std @[functional-unit.scala 648:11]
      r_uop.ctrl.is_sta <= io.req.bits.uop.ctrl.is_sta @[functional-unit.scala 648:11]
      r_uop.ctrl.is_load <= io.req.bits.uop.ctrl.is_load @[functional-unit.scala 648:11]
      r_uop.ctrl.csr_cmd <= io.req.bits.uop.ctrl.csr_cmd @[functional-unit.scala 648:11]
      r_uop.ctrl.fcn_dw <= io.req.bits.uop.ctrl.fcn_dw @[functional-unit.scala 648:11]
      r_uop.ctrl.op_fcn <= io.req.bits.uop.ctrl.op_fcn @[functional-unit.scala 648:11]
      r_uop.ctrl.imm_sel <= io.req.bits.uop.ctrl.imm_sel @[functional-unit.scala 648:11]
      r_uop.ctrl.op2_sel <= io.req.bits.uop.ctrl.op2_sel @[functional-unit.scala 648:11]
      r_uop.ctrl.op1_sel <= io.req.bits.uop.ctrl.op1_sel @[functional-unit.scala 648:11]
      r_uop.ctrl.br_type <= io.req.bits.uop.ctrl.br_type @[functional-unit.scala 648:11]
      r_uop.fu_code <= io.req.bits.uop.fu_code @[functional-unit.scala 648:11]
      r_uop.iq_type <= io.req.bits.uop.iq_type @[functional-unit.scala 648:11]
      r_uop.debug_pc <= io.req.bits.uop.debug_pc @[functional-unit.scala 648:11]
      r_uop.is_rvc <= io.req.bits.uop.is_rvc @[functional-unit.scala 648:11]
      r_uop.debug_inst <= io.req.bits.uop.debug_inst @[functional-unit.scala 648:11]
      r_uop.inst <= io.req.bits.uop.inst @[functional-unit.scala 648:11]
      r_uop.uopc <= io.req.bits.uop.uopc @[functional-unit.scala 648:11]
      node _T_4 = not(io.brupdate.b1.resolve_mask) @[util.scala 85:27]
      node _T_5 = and(io.req.bits.uop.br_mask, _T_4) @[util.scala 85:25]
      r_uop.br_mask <= _T_5 @[functional-unit.scala 649:19]
      skip @[functional-unit.scala 645:24]
    else : @[functional-unit.scala 650:16]
      node _T_6 = and(io.brupdate.b1.mispredict_mask, r_uop.br_mask) @[util.scala 118:51]
      node _T_7 = neq(_T_6, UInt<1>("h00")) @[util.scala 118:59]
      node _T_8 = or(_T_7, io.req.bits.kill) @[functional-unit.scala 651:53]
      do_kill <= _T_8 @[functional-unit.scala 651:13]
      node _T_9 = not(io.brupdate.b1.resolve_mask) @[util.scala 85:27]
      node _T_10 = and(r_uop.br_mask, _T_9) @[util.scala 85:25]
      r_uop.br_mask <= _T_10 @[functional-unit.scala 652:19]
      skip @[functional-unit.scala 650:16]
    io.resp.bits.uop.debug_tsrc <= r_uop.debug_tsrc @[functional-unit.scala 656:20]
    io.resp.bits.uop.debug_fsrc <= r_uop.debug_fsrc @[functional-unit.scala 656:20]
    io.resp.bits.uop.bp_xcpt_if <= r_uop.bp_xcpt_if @[functional-unit.scala 656:20]
    io.resp.bits.uop.bp_debug_if <= r_uop.bp_debug_if @[functional-unit.scala 656:20]
    io.resp.bits.uop.xcpt_ma_if <= r_uop.xcpt_ma_if @[functional-unit.scala 656:20]
    io.resp.bits.uop.xcpt_ae_if <= r_uop.xcpt_ae_if @[functional-unit.scala 656:20]
    io.resp.bits.uop.xcpt_pf_if <= r_uop.xcpt_pf_if @[functional-unit.scala 656:20]
    io.resp.bits.uop.fp_single <= r_uop.fp_single @[functional-unit.scala 656:20]
    io.resp.bits.uop.fp_val <= r_uop.fp_val @[functional-unit.scala 656:20]
    io.resp.bits.uop.frs3_en <= r_uop.frs3_en @[functional-unit.scala 656:20]
    io.resp.bits.uop.lrs2_rtype <= r_uop.lrs2_rtype @[functional-unit.scala 656:20]
    io.resp.bits.uop.lrs1_rtype <= r_uop.lrs1_rtype @[functional-unit.scala 656:20]
    io.resp.bits.uop.dst_rtype <= r_uop.dst_rtype @[functional-unit.scala 656:20]
    io.resp.bits.uop.ldst_val <= r_uop.ldst_val @[functional-unit.scala 656:20]
    io.resp.bits.uop.lrs3 <= r_uop.lrs3 @[functional-unit.scala 656:20]
    io.resp.bits.uop.lrs2 <= r_uop.lrs2 @[functional-unit.scala 656:20]
    io.resp.bits.uop.lrs1 <= r_uop.lrs1 @[functional-unit.scala 656:20]
    io.resp.bits.uop.ldst <= r_uop.ldst @[functional-unit.scala 656:20]
    io.resp.bits.uop.ldst_is_rs1 <= r_uop.ldst_is_rs1 @[functional-unit.scala 656:20]
    io.resp.bits.uop.flush_on_commit <= r_uop.flush_on_commit @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_unique <= r_uop.is_unique @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_sys_pc2epc <= r_uop.is_sys_pc2epc @[functional-unit.scala 656:20]
    io.resp.bits.uop.uses_stq <= r_uop.uses_stq @[functional-unit.scala 656:20]
    io.resp.bits.uop.uses_ldq <= r_uop.uses_ldq @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_amo <= r_uop.is_amo @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_fencei <= r_uop.is_fencei @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_fence <= r_uop.is_fence @[functional-unit.scala 656:20]
    io.resp.bits.uop.mem_signed <= r_uop.mem_signed @[functional-unit.scala 656:20]
    io.resp.bits.uop.mem_size <= r_uop.mem_size @[functional-unit.scala 656:20]
    io.resp.bits.uop.mem_cmd <= r_uop.mem_cmd @[functional-unit.scala 656:20]
    io.resp.bits.uop.bypassable <= r_uop.bypassable @[functional-unit.scala 656:20]
    io.resp.bits.uop.exc_cause <= r_uop.exc_cause @[functional-unit.scala 656:20]
    io.resp.bits.uop.exception <= r_uop.exception @[functional-unit.scala 656:20]
    io.resp.bits.uop.stale_pdst <= r_uop.stale_pdst @[functional-unit.scala 656:20]
    io.resp.bits.uop.ppred_busy <= r_uop.ppred_busy @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs3_busy <= r_uop.prs3_busy @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs2_busy <= r_uop.prs2_busy @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs1_busy <= r_uop.prs1_busy @[functional-unit.scala 656:20]
    io.resp.bits.uop.ppred <= r_uop.ppred @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs3 <= r_uop.prs3 @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs2 <= r_uop.prs2 @[functional-unit.scala 656:20]
    io.resp.bits.uop.prs1 <= r_uop.prs1 @[functional-unit.scala 656:20]
    io.resp.bits.uop.pdst <= r_uop.pdst @[functional-unit.scala 656:20]
    io.resp.bits.uop.rxq_idx <= r_uop.rxq_idx @[functional-unit.scala 656:20]
    io.resp.bits.uop.stq_idx <= r_uop.stq_idx @[functional-unit.scala 656:20]
    io.resp.bits.uop.ldq_idx <= r_uop.ldq_idx @[functional-unit.scala 656:20]
    io.resp.bits.uop.rob_idx <= r_uop.rob_idx @[functional-unit.scala 656:20]
    io.resp.bits.uop.csr_addr <= r_uop.csr_addr @[functional-unit.scala 656:20]
    io.resp.bits.uop.imm_packed <= r_uop.imm_packed @[functional-unit.scala 656:20]
    io.resp.bits.uop.taken <= r_uop.taken @[functional-unit.scala 656:20]
    io.resp.bits.uop.pc_lob <= r_uop.pc_lob @[functional-unit.scala 656:20]
    io.resp.bits.uop.edge_inst <= r_uop.edge_inst @[functional-unit.scala 656:20]
    io.resp.bits.uop.ftq_idx <= r_uop.ftq_idx @[functional-unit.scala 656:20]
    io.resp.bits.uop.br_tag <= r_uop.br_tag @[functional-unit.scala 656:20]
    io.resp.bits.uop.br_mask <= r_uop.br_mask @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_sfb <= r_uop.is_sfb @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_jal <= r_uop.is_jal @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_jalr <= r_uop.is_jalr @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_br <= r_uop.is_br @[functional-unit.scala 656:20]
    io.resp.bits.uop.iw_p2_poisoned <= r_uop.iw_p2_poisoned @[functional-unit.scala 656:20]
    io.resp.bits.uop.iw_p1_poisoned <= r_uop.iw_p1_poisoned @[functional-unit.scala 656:20]
    io.resp.bits.uop.iw_state <= r_uop.iw_state @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.is_std <= r_uop.ctrl.is_std @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.is_sta <= r_uop.ctrl.is_sta @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.is_load <= r_uop.ctrl.is_load @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.csr_cmd <= r_uop.ctrl.csr_cmd @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.fcn_dw <= r_uop.ctrl.fcn_dw @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.op_fcn <= r_uop.ctrl.op_fcn @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.imm_sel <= r_uop.ctrl.imm_sel @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.op2_sel <= r_uop.ctrl.op2_sel @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.op1_sel <= r_uop.ctrl.op1_sel @[functional-unit.scala 656:20]
    io.resp.bits.uop.ctrl.br_type <= r_uop.ctrl.br_type @[functional-unit.scala 656:20]
    io.resp.bits.uop.fu_code <= r_uop.fu_code @[functional-unit.scala 656:20]
    io.resp.bits.uop.iq_type <= r_uop.iq_type @[functional-unit.scala 656:20]
    io.resp.bits.uop.debug_pc <= r_uop.debug_pc @[functional-unit.scala 656:20]
    io.resp.bits.uop.is_rvc <= r_uop.is_rvc @[functional-unit.scala 656:20]
    io.resp.bits.uop.debug_inst <= r_uop.debug_inst @[functional-unit.scala 656:20]
    io.resp.bits.uop.inst <= r_uop.inst @[functional-unit.scala 656:20]
    io.resp.bits.uop.uopc <= r_uop.uopc @[functional-unit.scala 656:20]
    inst div of MulDiv @[functional-unit.scala 670:19]
    div.clock <= clock
    div.reset <= reset
    node _T_11 = eq(do_kill, UInt<1>("h00")) @[functional-unit.scala 673:42]
    node _T_12 = and(io.req.valid, _T_11) @[functional-unit.scala 673:39]
    div.io.req.valid <= _T_12 @[functional-unit.scala 673:23]
    div.io.req.bits.dw <= io.req.bits.uop.ctrl.fcn_dw @[functional-unit.scala 674:23]
    div.io.req.bits.fn <= io.req.bits.uop.ctrl.op_fcn @[functional-unit.scala 675:23]
    div.io.req.bits.in1 <= io.req.bits.rs1_data @[functional-unit.scala 676:23]
    div.io.req.bits.in2 <= io.req.bits.rs2_data @[functional-unit.scala 677:23]
    div.io.req.bits.tag is invalid @[functional-unit.scala 678:23]
    io.req.ready <= div.io.req.ready @[functional-unit.scala 679:23]
    div.io.kill <= do_kill @[functional-unit.scala 682:23]
    node _T_13 = eq(do_kill, UInt<1>("h00")) @[functional-unit.scala 685:47]
    node _T_14 = and(div.io.resp.valid, _T_13) @[functional-unit.scala 685:44]
    io.resp.valid <= _T_14 @[functional-unit.scala 685:23]
    div.io.resp.ready <= io.resp.ready @[functional-unit.scala 686:23]
    io.resp.bits.data <= div.io.resp.bits.data @[functional-unit.scala 687:23]
    
