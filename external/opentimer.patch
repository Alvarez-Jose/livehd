diff repo
--- /dev/null
+++ ot/config.hpp
@@ -0,0 +1,8 @@
+#define OT_VERSION_MAJOR 2
+#define OT_VERSION_MINOR 0
+#define OT_VERSION_PATCH 0
+#define OT_VERSION "2.0.0 (alpha)"
+#define OT_HOME "ot"
+#define OT_HOST_SYSTEM "unix"
+#define OT_INSTALL_PREFIX "/invalid/local"
+#define OT_TCLSH_PATH "/invalid/tclsh"
diff --git a/ot/utility/CLI11.hpp b/ot/utility/CLI11.hpp
--- ot/utility/utility.hpp
+++ ot/utility/utility.hpp
@@ -1,6 +1,8 @@
 #ifndef OT_UTILITY_UTILITY_HPP_
 #define OT_UTILITY_UTILITY_HPP_

+#include <type_traits>
+
 #include <ot/utility/lambda.hpp>
 #include <ot/utility/logger.hpp>
 #include <ot/utility/tokenizer.hpp>

diff --git a/ot/utility/CLI11.hpp b/ot/utility/CLI11.hpp
--- ot/utility/CLI11.hpp
+++ ot/utility/CLI11.hpp
@@ -3713,14 +3713,14 @@ struct AppFriend {
     /// Wrap _parse_short, perfectly forward arguments and return
     template <typename... Args>
     static auto parse_arg(App *app, Args &&... args) ->
-        typename std::result_of<decltype (&App::_parse_arg)(App, Args...)>::type {
+        typename std::invoke_result<decltype (&App::_parse_arg)(App, Args...)>::type {
         return app->_parse_arg(std::forward<Args>(args)...);
     }

     /// Wrap _parse_subcommand, perfectly forward arguments and return
     template <typename... Args>
     static auto parse_subcommand(App *app, Args &&... args) ->
-        typename std::result_of<decltype (&App::_parse_subcommand)(App, Args...)>::type {
+        typename std::invoke_result<decltype (&App::_parse_subcommand)(App, Args...)>::type {
         return app->_parse_subcommand(std::forward<Args>(args)...);
     }
 };
